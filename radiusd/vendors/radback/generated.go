// Code generated by radius-dict-gen. DO NOT EDIT.

package radback

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Redback_VendorID = 2352
)

func _Redback_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Redback_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Redback_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Redback_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Redback_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Redback_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Redback_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Redback_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Redback_AddVendor(p, typ, attr)
}

func _Redback_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Redback_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func ClientDNSPri_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 1, a)
}

func ClientDNSPri_Get(p *radius.Packet) (value net.IP) {
	value, _ = ClientDNSPri_Lookup(p)
	return
}

func ClientDNSPri_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Redback_GetsVendor(p, 1) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClientDNSPri_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Redback_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ClientDNSPri_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 1, a)
}

func ClientDNSPri_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 1)
}

func ClientDNSSec_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 2, a)
}

func ClientDNSSec_Get(p *radius.Packet) (value net.IP) {
	value, _ = ClientDNSSec_Lookup(p)
	return
}

func ClientDNSSec_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Redback_GetsVendor(p, 2) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClientDNSSec_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Redback_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ClientDNSSec_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 2, a)
}

func ClientDNSSec_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 2)
}

type DHCPMaxLeases uint32

var DHCPMaxLeases_Strings = map[DHCPMaxLeases]string{}

func (a DHCPMaxLeases) String() string {
	if str, ok := DHCPMaxLeases_Strings[a]; ok {
		return str
	}
	return "DHCPMaxLeases(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DHCPMaxLeases_Add(p *radius.Packet, value DHCPMaxLeases) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 3, a)
}

func DHCPMaxLeases_Get(p *radius.Packet) (value DHCPMaxLeases) {
	value, _ = DHCPMaxLeases_Lookup(p)
	return
}

func DHCPMaxLeases_Gets(p *radius.Packet) (values []DHCPMaxLeases, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DHCPMaxLeases(i))
	}
	return
}

func DHCPMaxLeases_Lookup(p *radius.Packet) (value DHCPMaxLeases, err error) {
	a, ok := _Redback_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DHCPMaxLeases(i)
	return
}

func DHCPMaxLeases_Set(p *radius.Packet, value DHCPMaxLeases) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 3, a)
}

func DHCPMaxLeases_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 3)
}

func ContextName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 4, a)
}

func ContextName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 4, a)
}

func ContextName_Get(p *radius.Packet) (value []byte) {
	value, _ = ContextName_Lookup(p)
	return
}

func ContextName_GetString(p *radius.Packet) (value string) {
	value, _ = ContextName_LookupString(p)
	return
}

func ContextName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ContextName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ContextName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ContextName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ContextName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 4, a)
}

func ContextName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 4, a)
}

func ContextName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 4)
}

func BridgeGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 5, a)
}

func BridgeGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 5, a)
}

func BridgeGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = BridgeGroup_Lookup(p)
	return
}

func BridgeGroup_GetString(p *radius.Packet) (value string) {
	value, _ = BridgeGroup_LookupString(p)
	return
}

func BridgeGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BridgeGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BridgeGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BridgeGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BridgeGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 5, a)
}

func BridgeGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 5, a)
}

func BridgeGroup_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 5)
}

func BGAgingTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 6, a)
}

func BGAgingTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 6, a)
}

func BGAgingTime_Get(p *radius.Packet) (value []byte) {
	value, _ = BGAgingTime_Lookup(p)
	return
}

func BGAgingTime_GetString(p *radius.Packet) (value string) {
	value, _ = BGAgingTime_LookupString(p)
	return
}

func BGAgingTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BGAgingTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BGAgingTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BGAgingTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BGAgingTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 6, a)
}

func BGAgingTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 6, a)
}

func BGAgingTime_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 6)
}

func BGPathCost_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 7, a)
}

func BGPathCost_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 7, a)
}

func BGPathCost_Get(p *radius.Packet) (value []byte) {
	value, _ = BGPathCost_Lookup(p)
	return
}

func BGPathCost_GetString(p *radius.Packet) (value string) {
	value, _ = BGPathCost_LookupString(p)
	return
}

func BGPathCost_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BGPathCost_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BGPathCost_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BGPathCost_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BGPathCost_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 7, a)
}

func BGPathCost_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 7, a)
}

func BGPathCost_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 7)
}

func BGSpanDis_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 8, a)
}

func BGSpanDis_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 8, a)
}

func BGSpanDis_Get(p *radius.Packet) (value []byte) {
	value, _ = BGSpanDis_Lookup(p)
	return
}

func BGSpanDis_GetString(p *radius.Packet) (value string) {
	value, _ = BGSpanDis_LookupString(p)
	return
}

func BGSpanDis_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BGSpanDis_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BGSpanDis_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BGSpanDis_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BGSpanDis_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 8, a)
}

func BGSpanDis_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 8, a)
}

func BGSpanDis_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 8)
}

func BGTransBPDU_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 9, a)
}

func BGTransBPDU_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 9, a)
}

func BGTransBPDU_Get(p *radius.Packet) (value []byte) {
	value, _ = BGTransBPDU_Lookup(p)
	return
}

func BGTransBPDU_GetString(p *radius.Packet) (value string) {
	value, _ = BGTransBPDU_LookupString(p)
	return
}

func BGTransBPDU_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BGTransBPDU_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BGTransBPDU_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BGTransBPDU_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BGTransBPDU_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 9, a)
}

func BGTransBPDU_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 9, a)
}

func BGTransBPDU_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 9)
}

type RateLimitRate uint32

var RateLimitRate_Strings = map[RateLimitRate]string{}

func (a RateLimitRate) String() string {
	if str, ok := RateLimitRate_Strings[a]; ok {
		return str
	}
	return "RateLimitRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateLimitRate_Add(p *radius.Packet, value RateLimitRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 10, a)
}

func RateLimitRate_Get(p *radius.Packet) (value RateLimitRate) {
	value, _ = RateLimitRate_Lookup(p)
	return
}

func RateLimitRate_Gets(p *radius.Packet) (values []RateLimitRate, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateLimitRate(i))
	}
	return
}

func RateLimitRate_Lookup(p *radius.Packet) (value RateLimitRate, err error) {
	a, ok := _Redback_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateLimitRate(i)
	return
}

func RateLimitRate_Set(p *radius.Packet, value RateLimitRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 10, a)
}

func RateLimitRate_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 10)
}

type RateLimitBurst uint32

var RateLimitBurst_Strings = map[RateLimitBurst]string{}

func (a RateLimitBurst) String() string {
	if str, ok := RateLimitBurst_Strings[a]; ok {
		return str
	}
	return "RateLimitBurst(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RateLimitBurst_Add(p *radius.Packet, value RateLimitBurst) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 11, a)
}

func RateLimitBurst_Get(p *radius.Packet) (value RateLimitBurst) {
	value, _ = RateLimitBurst_Lookup(p)
	return
}

func RateLimitBurst_Gets(p *radius.Packet) (values []RateLimitBurst, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RateLimitBurst(i))
	}
	return
}

func RateLimitBurst_Lookup(p *radius.Packet) (value RateLimitBurst, err error) {
	a, ok := _Redback_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RateLimitBurst(i)
	return
}

func RateLimitBurst_Set(p *radius.Packet, value RateLimitBurst) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 11, a)
}

func RateLimitBurst_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 11)
}

type PoliceRate uint32

var PoliceRate_Strings = map[PoliceRate]string{}

func (a PoliceRate) String() string {
	if str, ok := PoliceRate_Strings[a]; ok {
		return str
	}
	return "PoliceRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PoliceRate_Add(p *radius.Packet, value PoliceRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 12, a)
}

func PoliceRate_Get(p *radius.Packet) (value PoliceRate) {
	value, _ = PoliceRate_Lookup(p)
	return
}

func PoliceRate_Gets(p *radius.Packet) (values []PoliceRate, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PoliceRate(i))
	}
	return
}

func PoliceRate_Lookup(p *radius.Packet) (value PoliceRate, err error) {
	a, ok := _Redback_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PoliceRate(i)
	return
}

func PoliceRate_Set(p *radius.Packet, value PoliceRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 12, a)
}

func PoliceRate_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 12)
}

type PoliceBurst uint32

var PoliceBurst_Strings = map[PoliceBurst]string{}

func (a PoliceBurst) String() string {
	if str, ok := PoliceBurst_Strings[a]; ok {
		return str
	}
	return "PoliceBurst(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PoliceBurst_Add(p *radius.Packet, value PoliceBurst) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 13, a)
}

func PoliceBurst_Get(p *radius.Packet) (value PoliceBurst) {
	value, _ = PoliceBurst_Lookup(p)
	return
}

func PoliceBurst_Gets(p *radius.Packet) (values []PoliceBurst, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PoliceBurst(i))
	}
	return
}

func PoliceBurst_Lookup(p *radius.Packet) (value PoliceBurst, err error) {
	a, ok := _Redback_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PoliceBurst(i)
	return
}

func PoliceBurst_Set(p *radius.Packet, value PoliceBurst) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 13, a)
}

func PoliceBurst_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 13)
}

type SourceValidation uint32

const (
	SourceValidation_Value_Enabled  SourceValidation = 1
	SourceValidation_Value_Disabled SourceValidation = 2
)

var SourceValidation_Strings = map[SourceValidation]string{
	SourceValidation_Value_Enabled:  "Enabled",
	SourceValidation_Value_Disabled: "Disabled",
}

func (a SourceValidation) String() string {
	if str, ok := SourceValidation_Strings[a]; ok {
		return str
	}
	return "SourceValidation(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SourceValidation_Add(p *radius.Packet, value SourceValidation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 14, a)
}

func SourceValidation_Get(p *radius.Packet) (value SourceValidation) {
	value, _ = SourceValidation_Lookup(p)
	return
}

func SourceValidation_Gets(p *radius.Packet) (values []SourceValidation, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SourceValidation(i))
	}
	return
}

func SourceValidation_Lookup(p *radius.Packet) (value SourceValidation, err error) {
	a, ok := _Redback_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SourceValidation(i)
	return
}

func SourceValidation_Set(p *radius.Packet, value SourceValidation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 14, a)
}

func SourceValidation_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 14)
}

type TunnelDomain uint32

const (
	TunnelDomain_Value_Enabled  TunnelDomain = 1
	TunnelDomain_Value_Disabled TunnelDomain = 2
)

var TunnelDomain_Strings = map[TunnelDomain]string{
	TunnelDomain_Value_Enabled:  "Enabled",
	TunnelDomain_Value_Disabled: "Disabled",
}

func (a TunnelDomain) String() string {
	if str, ok := TunnelDomain_Strings[a]; ok {
		return str
	}
	return "TunnelDomain(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelDomain_Add(p *radius.Packet, value TunnelDomain) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 15, a)
}

func TunnelDomain_Get(p *radius.Packet) (value TunnelDomain) {
	value, _ = TunnelDomain_Lookup(p)
	return
}

func TunnelDomain_Gets(p *radius.Packet) (values []TunnelDomain, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelDomain(i))
	}
	return
}

func TunnelDomain_Lookup(p *radius.Packet) (value TunnelDomain, err error) {
	a, ok := _Redback_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelDomain(i)
	return
}

func TunnelDomain_Set(p *radius.Packet, value TunnelDomain) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 15, a)
}

func TunnelDomain_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 15)
}

func TunnelLocalName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 16, a)
}

func TunnelLocalName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 16, a)
}

func TunnelLocalName_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelLocalName_Lookup(p)
	return
}

func TunnelLocalName_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelLocalName_LookupString(p)
	return
}

func TunnelLocalName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelLocalName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelLocalName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelLocalName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelLocalName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 16, a)
}

func TunnelLocalName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 16, a)
}

func TunnelLocalName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 16)
}

func TunnelRemoteName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 17, a)
}

func TunnelRemoteName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 17, a)
}

func TunnelRemoteName_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelRemoteName_Lookup(p)
	return
}

func TunnelRemoteName_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelRemoteName_LookupString(p)
	return
}

func TunnelRemoteName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelRemoteName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelRemoteName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelRemoteName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelRemoteName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 17, a)
}

func TunnelRemoteName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 17, a)
}

func TunnelRemoteName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 17)
}

type TunnelFunction uint32

const (
	TunnelFunction_Value_LACOnly TunnelFunction = 1
	TunnelFunction_Value_LNSOnly TunnelFunction = 2
	TunnelFunction_Value_LACLNS  TunnelFunction = 3
)

var TunnelFunction_Strings = map[TunnelFunction]string{
	TunnelFunction_Value_LACOnly: "LAC-Only",
	TunnelFunction_Value_LNSOnly: "LNS-Only",
	TunnelFunction_Value_LACLNS:  "LAC-LNS",
}

func (a TunnelFunction) String() string {
	if str, ok := TunnelFunction_Strings[a]; ok {
		return str
	}
	return "TunnelFunction(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelFunction_Add(p *radius.Packet, value TunnelFunction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 18, a)
}

func TunnelFunction_Get(p *radius.Packet) (value TunnelFunction) {
	value, _ = TunnelFunction_Lookup(p)
	return
}

func TunnelFunction_Gets(p *radius.Packet) (values []TunnelFunction, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelFunction(i))
	}
	return
}

func TunnelFunction_Lookup(p *radius.Packet) (value TunnelFunction, err error) {
	a, ok := _Redback_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelFunction(i)
	return
}

func TunnelFunction_Set(p *radius.Packet, value TunnelFunction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 18, a)
}

func TunnelFunction_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 18)
}

type TunnelFlowControl uint32

var TunnelFlowControl_Strings = map[TunnelFlowControl]string{}

func (a TunnelFlowControl) String() string {
	if str, ok := TunnelFlowControl_Strings[a]; ok {
		return str
	}
	return "TunnelFlowControl(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelFlowControl_Add(p *radius.Packet, value TunnelFlowControl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 19, a)
}

func TunnelFlowControl_Get(p *radius.Packet) (value TunnelFlowControl) {
	value, _ = TunnelFlowControl_Lookup(p)
	return
}

func TunnelFlowControl_Gets(p *radius.Packet) (values []TunnelFlowControl, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 19) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelFlowControl(i))
	}
	return
}

func TunnelFlowControl_Lookup(p *radius.Packet) (value TunnelFlowControl, err error) {
	a, ok := _Redback_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelFlowControl(i)
	return
}

func TunnelFlowControl_Set(p *radius.Packet, value TunnelFlowControl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 19, a)
}

func TunnelFlowControl_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 19)
}

type TunnelStatic uint32

var TunnelStatic_Strings = map[TunnelStatic]string{}

func (a TunnelStatic) String() string {
	if str, ok := TunnelStatic_Strings[a]; ok {
		return str
	}
	return "TunnelStatic(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelStatic_Add(p *radius.Packet, value TunnelStatic) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 20, a)
}

func TunnelStatic_Get(p *radius.Packet) (value TunnelStatic) {
	value, _ = TunnelStatic_Lookup(p)
	return
}

func TunnelStatic_Gets(p *radius.Packet) (values []TunnelStatic, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelStatic(i))
	}
	return
}

func TunnelStatic_Lookup(p *radius.Packet) (value TunnelStatic, err error) {
	a, ok := _Redback_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelStatic(i)
	return
}

func TunnelStatic_Set(p *radius.Packet, value TunnelStatic) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 20, a)
}

func TunnelStatic_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 20)
}

type TunnelMaxSessions uint32

var TunnelMaxSessions_Strings = map[TunnelMaxSessions]string{}

func (a TunnelMaxSessions) String() string {
	if str, ok := TunnelMaxSessions_Strings[a]; ok {
		return str
	}
	return "TunnelMaxSessions(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelMaxSessions_Add(p *radius.Packet, value TunnelMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 21, a)
}

func TunnelMaxSessions_Get(p *radius.Packet) (value TunnelMaxSessions) {
	value, _ = TunnelMaxSessions_Lookup(p)
	return
}

func TunnelMaxSessions_Gets(p *radius.Packet) (values []TunnelMaxSessions, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelMaxSessions(i))
	}
	return
}

func TunnelMaxSessions_Lookup(p *radius.Packet) (value TunnelMaxSessions, err error) {
	a, ok := _Redback_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelMaxSessions(i)
	return
}

func TunnelMaxSessions_Set(p *radius.Packet, value TunnelMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 21, a)
}

func TunnelMaxSessions_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 21)
}

type TunnelMaxTunnels uint32

var TunnelMaxTunnels_Strings = map[TunnelMaxTunnels]string{}

func (a TunnelMaxTunnels) String() string {
	if str, ok := TunnelMaxTunnels_Strings[a]; ok {
		return str
	}
	return "TunnelMaxTunnels(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelMaxTunnels_Add(p *radius.Packet, value TunnelMaxTunnels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 22, a)
}

func TunnelMaxTunnels_Get(p *radius.Packet) (value TunnelMaxTunnels) {
	value, _ = TunnelMaxTunnels_Lookup(p)
	return
}

func TunnelMaxTunnels_Gets(p *radius.Packet) (values []TunnelMaxTunnels, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelMaxTunnels(i))
	}
	return
}

func TunnelMaxTunnels_Lookup(p *radius.Packet) (value TunnelMaxTunnels, err error) {
	a, ok := _Redback_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelMaxTunnels(i)
	return
}

func TunnelMaxTunnels_Set(p *radius.Packet, value TunnelMaxTunnels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 22, a)
}

func TunnelMaxTunnels_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 22)
}

type TunnelSessionAuth uint32

const (
	TunnelSessionAuth_Value_CHAP    TunnelSessionAuth = 1
	TunnelSessionAuth_Value_PAP     TunnelSessionAuth = 2
	TunnelSessionAuth_Value_CHAPPAP TunnelSessionAuth = 3
)

var TunnelSessionAuth_Strings = map[TunnelSessionAuth]string{
	TunnelSessionAuth_Value_CHAP:    "CHAP",
	TunnelSessionAuth_Value_PAP:     "PAP",
	TunnelSessionAuth_Value_CHAPPAP: "CHAP-PAP",
}

func (a TunnelSessionAuth) String() string {
	if str, ok := TunnelSessionAuth_Strings[a]; ok {
		return str
	}
	return "TunnelSessionAuth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelSessionAuth_Add(p *radius.Packet, value TunnelSessionAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 23, a)
}

func TunnelSessionAuth_Get(p *radius.Packet) (value TunnelSessionAuth) {
	value, _ = TunnelSessionAuth_Lookup(p)
	return
}

func TunnelSessionAuth_Gets(p *radius.Packet) (values []TunnelSessionAuth, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelSessionAuth(i))
	}
	return
}

func TunnelSessionAuth_Lookup(p *radius.Packet) (value TunnelSessionAuth, err error) {
	a, ok := _Redback_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelSessionAuth(i)
	return
}

func TunnelSessionAuth_Set(p *radius.Packet, value TunnelSessionAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 23, a)
}

func TunnelSessionAuth_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 23)
}

type TunnelWindow uint32

var TunnelWindow_Strings = map[TunnelWindow]string{}

func (a TunnelWindow) String() string {
	if str, ok := TunnelWindow_Strings[a]; ok {
		return str
	}
	return "TunnelWindow(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelWindow_Add(p *radius.Packet, value TunnelWindow) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 24, a)
}

func TunnelWindow_Get(p *radius.Packet) (value TunnelWindow) {
	value, _ = TunnelWindow_Lookup(p)
	return
}

func TunnelWindow_Gets(p *radius.Packet) (values []TunnelWindow, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelWindow(i))
	}
	return
}

func TunnelWindow_Lookup(p *radius.Packet) (value TunnelWindow, err error) {
	a, ok := _Redback_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelWindow(i)
	return
}

func TunnelWindow_Set(p *radius.Packet, value TunnelWindow) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 24, a)
}

func TunnelWindow_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 24)
}

type TunnelRetransmit uint32

var TunnelRetransmit_Strings = map[TunnelRetransmit]string{}

func (a TunnelRetransmit) String() string {
	if str, ok := TunnelRetransmit_Strings[a]; ok {
		return str
	}
	return "TunnelRetransmit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelRetransmit_Add(p *radius.Packet, value TunnelRetransmit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 25, a)
}

func TunnelRetransmit_Get(p *radius.Packet) (value TunnelRetransmit) {
	value, _ = TunnelRetransmit_Lookup(p)
	return
}

func TunnelRetransmit_Gets(p *radius.Packet) (values []TunnelRetransmit, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelRetransmit(i))
	}
	return
}

func TunnelRetransmit_Lookup(p *radius.Packet) (value TunnelRetransmit, err error) {
	a, ok := _Redback_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelRetransmit(i)
	return
}

func TunnelRetransmit_Set(p *radius.Packet, value TunnelRetransmit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 25, a)
}

func TunnelRetransmit_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 25)
}

type TunnelCmdTimeout uint32

var TunnelCmdTimeout_Strings = map[TunnelCmdTimeout]string{}

func (a TunnelCmdTimeout) String() string {
	if str, ok := TunnelCmdTimeout_Strings[a]; ok {
		return str
	}
	return "TunnelCmdTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelCmdTimeout_Add(p *radius.Packet, value TunnelCmdTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 26, a)
}

func TunnelCmdTimeout_Get(p *radius.Packet) (value TunnelCmdTimeout) {
	value, _ = TunnelCmdTimeout_Lookup(p)
	return
}

func TunnelCmdTimeout_Gets(p *radius.Packet) (values []TunnelCmdTimeout, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelCmdTimeout(i))
	}
	return
}

func TunnelCmdTimeout_Lookup(p *radius.Packet) (value TunnelCmdTimeout, err error) {
	a, ok := _Redback_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelCmdTimeout(i)
	return
}

func TunnelCmdTimeout_Set(p *radius.Packet, value TunnelCmdTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 26, a)
}

func TunnelCmdTimeout_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 26)
}

func PPPOEURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 27, a)
}

func PPPOEURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 27, a)
}

func PPPOEURL_Get(p *radius.Packet) (value []byte) {
	value, _ = PPPOEURL_Lookup(p)
	return
}

func PPPOEURL_GetString(p *radius.Packet) (value string) {
	value, _ = PPPOEURL_LookupString(p)
	return
}

func PPPOEURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PPPOEURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PPPOEURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PPPOEURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PPPOEURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 27, a)
}

func PPPOEURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 27, a)
}

func PPPOEURL_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 27)
}

func PPPOEMOTM_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 28, a)
}

func PPPOEMOTM_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 28, a)
}

func PPPOEMOTM_Get(p *radius.Packet) (value []byte) {
	value, _ = PPPOEMOTM_Lookup(p)
	return
}

func PPPOEMOTM_GetString(p *radius.Packet) (value string) {
	value, _ = PPPOEMOTM_LookupString(p)
	return
}

func PPPOEMOTM_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PPPOEMOTM_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PPPOEMOTM_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PPPOEMOTM_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PPPOEMOTM_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 28, a)
}

func PPPOEMOTM_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 28, a)
}

func PPPOEMOTM_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 28)
}

type TunnelGroup uint32

const (
	TunnelGroup_Value_Enabled  TunnelGroup = 1
	TunnelGroup_Value_Disabled TunnelGroup = 2
)

var TunnelGroup_Strings = map[TunnelGroup]string{
	TunnelGroup_Value_Enabled:  "Enabled",
	TunnelGroup_Value_Disabled: "Disabled",
}

func (a TunnelGroup) String() string {
	if str, ok := TunnelGroup_Strings[a]; ok {
		return str
	}
	return "TunnelGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelGroup_Add(p *radius.Packet, value TunnelGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 29, a)
}

func TunnelGroup_Get(p *radius.Packet) (value TunnelGroup) {
	value, _ = TunnelGroup_Lookup(p)
	return
}

func TunnelGroup_Gets(p *radius.Packet) (values []TunnelGroup, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 29) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelGroup(i))
	}
	return
}

func TunnelGroup_Lookup(p *radius.Packet) (value TunnelGroup, err error) {
	a, ok := _Redback_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelGroup(i)
	return
}

func TunnelGroup_Set(p *radius.Packet, value TunnelGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 29, a)
}

func TunnelGroup_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 29)
}

func TunnelContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 30, a)
}

func TunnelContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 30, a)
}

func TunnelContext_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelContext_Lookup(p)
	return
}

func TunnelContext_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelContext_LookupString(p)
	return
}

func TunnelContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 30) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 30) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 30, a)
}

func TunnelContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 30, a)
}

func TunnelContext_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 30)
}

type TunnelAlgorithm uint32

const (
	TunnelAlgorithm_Value_First       TunnelAlgorithm = 1
	TunnelAlgorithm_Value_LoadBalance TunnelAlgorithm = 2
	TunnelAlgorithm_Value_WRR         TunnelAlgorithm = 3
)

var TunnelAlgorithm_Strings = map[TunnelAlgorithm]string{
	TunnelAlgorithm_Value_First:       "First",
	TunnelAlgorithm_Value_LoadBalance: "Load-Balance",
	TunnelAlgorithm_Value_WRR:         "WRR",
}

func (a TunnelAlgorithm) String() string {
	if str, ok := TunnelAlgorithm_Strings[a]; ok {
		return str
	}
	return "TunnelAlgorithm(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelAlgorithm_Add(p *radius.Packet, value TunnelAlgorithm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 31, a)
}

func TunnelAlgorithm_Get(p *radius.Packet) (value TunnelAlgorithm) {
	value, _ = TunnelAlgorithm_Lookup(p)
	return
}

func TunnelAlgorithm_Gets(p *radius.Packet) (values []TunnelAlgorithm, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 31) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelAlgorithm(i))
	}
	return
}

func TunnelAlgorithm_Lookup(p *radius.Packet) (value TunnelAlgorithm, err error) {
	a, ok := _Redback_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelAlgorithm(i)
	return
}

func TunnelAlgorithm_Set(p *radius.Packet, value TunnelAlgorithm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 31, a)
}

func TunnelAlgorithm_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 31)
}

type TunnelDeadtime uint32

var TunnelDeadtime_Strings = map[TunnelDeadtime]string{}

func (a TunnelDeadtime) String() string {
	if str, ok := TunnelDeadtime_Strings[a]; ok {
		return str
	}
	return "TunnelDeadtime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelDeadtime_Add(p *radius.Packet, value TunnelDeadtime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 32, a)
}

func TunnelDeadtime_Get(p *radius.Packet) (value TunnelDeadtime) {
	value, _ = TunnelDeadtime_Lookup(p)
	return
}

func TunnelDeadtime_Gets(p *radius.Packet) (values []TunnelDeadtime, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelDeadtime(i))
	}
	return
}

func TunnelDeadtime_Lookup(p *radius.Packet) (value TunnelDeadtime, err error) {
	a, ok := _Redback_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelDeadtime(i)
	return
}

func TunnelDeadtime_Set(p *radius.Packet, value TunnelDeadtime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 32, a)
}

func TunnelDeadtime_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 32)
}

type McastSend uint32

const (
	McastSend_Value_NOSEND          McastSend = 1
	McastSend_Value_SEND            McastSend = 2
	McastSend_Value_UNSOLICITEDSEND McastSend = 3
)

var McastSend_Strings = map[McastSend]string{
	McastSend_Value_NOSEND:          "NO-SEND",
	McastSend_Value_SEND:            "SEND",
	McastSend_Value_UNSOLICITEDSEND: "UNSOLICITED-SEND",
}

func (a McastSend) String() string {
	if str, ok := McastSend_Strings[a]; ok {
		return str
	}
	return "McastSend(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func McastSend_Add(p *radius.Packet, value McastSend) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 33, a)
}

func McastSend_Get(p *radius.Packet) (value McastSend) {
	value, _ = McastSend_Lookup(p)
	return
}

func McastSend_Gets(p *radius.Packet) (values []McastSend, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, McastSend(i))
	}
	return
}

func McastSend_Lookup(p *radius.Packet) (value McastSend, err error) {
	a, ok := _Redback_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = McastSend(i)
	return
}

func McastSend_Set(p *radius.Packet, value McastSend) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 33, a)
}

func McastSend_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 33)
}

type McastReceive uint32

const (
	McastReceive_Value_NORECEIVE McastReceive = 1
	McastReceive_Value_RECEIVE   McastReceive = 2
)

var McastReceive_Strings = map[McastReceive]string{
	McastReceive_Value_NORECEIVE: "NO-RECEIVE",
	McastReceive_Value_RECEIVE:   "RECEIVE",
}

func (a McastReceive) String() string {
	if str, ok := McastReceive_Strings[a]; ok {
		return str
	}
	return "McastReceive(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func McastReceive_Add(p *radius.Packet, value McastReceive) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 34, a)
}

func McastReceive_Get(p *radius.Packet) (value McastReceive) {
	value, _ = McastReceive_Lookup(p)
	return
}

func McastReceive_Gets(p *radius.Packet) (values []McastReceive, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, McastReceive(i))
	}
	return
}

func McastReceive_Lookup(p *radius.Packet) (value McastReceive, err error) {
	a, ok := _Redback_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = McastReceive(i)
	return
}

func McastReceive_Set(p *radius.Packet, value McastReceive) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 34, a)
}

func McastReceive_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 34)
}

type McastMaxGroups uint32

var McastMaxGroups_Strings = map[McastMaxGroups]string{}

func (a McastMaxGroups) String() string {
	if str, ok := McastMaxGroups_Strings[a]; ok {
		return str
	}
	return "McastMaxGroups(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func McastMaxGroups_Add(p *radius.Packet, value McastMaxGroups) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 35, a)
}

func McastMaxGroups_Get(p *radius.Packet) (value McastMaxGroups) {
	value, _ = McastMaxGroups_Lookup(p)
	return
}

func McastMaxGroups_Gets(p *radius.Packet) (values []McastMaxGroups, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, McastMaxGroups(i))
	}
	return
}

func McastMaxGroups_Lookup(p *radius.Packet) (value McastMaxGroups, err error) {
	a, ok := _Redback_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = McastMaxGroups(i)
	return
}

func McastMaxGroups_Set(p *radius.Packet, value McastMaxGroups) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 35, a)
}

func McastMaxGroups_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 35)
}

func IPAddressPoolName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 36, a)
}

func IPAddressPoolName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 36, a)
}

func IPAddressPoolName_Get(p *radius.Packet) (value []byte) {
	value, _ = IPAddressPoolName_Lookup(p)
	return
}

func IPAddressPoolName_GetString(p *radius.Packet) (value string) {
	value, _ = IPAddressPoolName_LookupString(p)
	return
}

func IPAddressPoolName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPAddressPoolName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPAddressPoolName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IPAddressPoolName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IPAddressPoolName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 36, a)
}

func IPAddressPoolName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 36, a)
}

func IPAddressPoolName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 36)
}

type TunnelDNIS uint32

const (
	TunnelDNIS_Value_DNIS     TunnelDNIS = 1
	TunnelDNIS_Value_DNISOnly TunnelDNIS = 2
)

var TunnelDNIS_Strings = map[TunnelDNIS]string{
	TunnelDNIS_Value_DNIS:     "DNIS",
	TunnelDNIS_Value_DNISOnly: "DNIS-Only",
}

func (a TunnelDNIS) String() string {
	if str, ok := TunnelDNIS_Strings[a]; ok {
		return str
	}
	return "TunnelDNIS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelDNIS_Add(p *radius.Packet, value TunnelDNIS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 37, a)
}

func TunnelDNIS_Get(p *radius.Packet) (value TunnelDNIS) {
	value, _ = TunnelDNIS_Lookup(p)
	return
}

func TunnelDNIS_Gets(p *radius.Packet) (values []TunnelDNIS, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelDNIS(i))
	}
	return
}

func TunnelDNIS_Lookup(p *radius.Packet) (value TunnelDNIS, err error) {
	a, ok := _Redback_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelDNIS(i)
	return
}

func TunnelDNIS_Set(p *radius.Packet, value TunnelDNIS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 37, a)
}

func TunnelDNIS_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 37)
}

type MediumType uint32

const (
	MediumType_Value_DSL       MediumType = 11
	MediumType_Value_Cable     MediumType = 12
	MediumType_Value_Wireless  MediumType = 13
	MediumType_Value_Satellite MediumType = 14
)

var MediumType_Strings = map[MediumType]string{
	MediumType_Value_DSL:       "DSL",
	MediumType_Value_Cable:     "Cable",
	MediumType_Value_Wireless:  "Wireless",
	MediumType_Value_Satellite: "Satellite",
}

func (a MediumType) String() string {
	if str, ok := MediumType_Strings[a]; ok {
		return str
	}
	return "MediumType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MediumType_Add(p *radius.Packet, value MediumType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 38, a)
}

func MediumType_Get(p *radius.Packet) (value MediumType) {
	value, _ = MediumType_Lookup(p)
	return
}

func MediumType_Gets(p *radius.Packet) (values []MediumType, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 38) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MediumType(i))
	}
	return
}

func MediumType_Lookup(p *radius.Packet) (value MediumType, err error) {
	a, ok := _Redback_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MediumType(i)
	return
}

func MediumType_Set(p *radius.Packet, value MediumType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 38, a)
}

func MediumType_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 38)
}

type PVCEncapsulationType uint32

const (
	PVCEncapsulationType_Value_AAAENCAPSATMRAW               PVCEncapsulationType = 1
	PVCEncapsulationType_Value_AAAENCAPSATMROUTE1483         PVCEncapsulationType = 2
	PVCEncapsulationType_Value_AAAENCAPSATMAUTO1483          PVCEncapsulationType = 3
	PVCEncapsulationType_Value_AAAENCAPSATMMULTI             PVCEncapsulationType = 4
	PVCEncapsulationType_Value_AAAENCAPSATMBRIDGE1483        PVCEncapsulationType = 5
	PVCEncapsulationType_Value_AAAENCAPSATMPPP               PVCEncapsulationType = 6
	PVCEncapsulationType_Value_AAAENCAPSATMPPPSERIAL         PVCEncapsulationType = 7
	PVCEncapsulationType_Value_AAAENCAPSATMPPPNLPID          PVCEncapsulationType = 8
	PVCEncapsulationType_Value_AAAENCAPSATMPPPAUTO           PVCEncapsulationType = 9
	PVCEncapsulationType_Value_AAAENCAPSATMPPPOE             PVCEncapsulationType = 10
	PVCEncapsulationType_Value_AAAENCAPSATML2TP              PVCEncapsulationType = 11
	PVCEncapsulationType_Value_AAAENCAPSATMPPPLLC            PVCEncapsulationType = 12
	PVCEncapsulationType_Value_AAAENCAPSFRAMEAUTO1490        PVCEncapsulationType = 13
	PVCEncapsulationType_Value_AAAENCAPSFRAMEMULTI           PVCEncapsulationType = 14
	PVCEncapsulationType_Value_AAAENCAPSFRAMEBRIDGE1490      PVCEncapsulationType = 15
	PVCEncapsulationType_Value_AAAENCAPSFRAMEPPP             PVCEncapsulationType = 16
	PVCEncapsulationType_Value_AAAENCAPSFRAMEPPPAUTO         PVCEncapsulationType = 17
	PVCEncapsulationType_Value_AAAENCAPSFRAMEPPPOE           PVCEncapsulationType = 18
	PVCEncapsulationType_Value_AAAENCAPSFRAMEROUTE1490       PVCEncapsulationType = 19
	PVCEncapsulationType_Value_AAAENCAPSFRAMEL2TP            PVCEncapsulationType = 20
	PVCEncapsulationType_Value_AAAENCAPSL2TPVCMUXED          PVCEncapsulationType = 21
	PVCEncapsulationType_Value_AAAENCAPSETH                  PVCEncapsulationType = 22
	PVCEncapsulationType_Value_AAAENCAPSETHPPPOE             PVCEncapsulationType = 23
	PVCEncapsulationType_Value_AAAENCAPSETHMULTI             PVCEncapsulationType = 24
	PVCEncapsulationType_Value_AAAENCAPSETHDOT1Q             PVCEncapsulationType = 25
	PVCEncapsulationType_Value_AAAENCAPSETHDOT1QPPPOE        PVCEncapsulationType = 26
	PVCEncapsulationType_Value_AAAENCAPSATMMULTIPPPOE        PVCEncapsulationType = 27
	PVCEncapsulationType_Value_AAAENCAPSATMMULTIIPV6OE       PVCEncapsulationType = 28
	PVCEncapsulationType_Value_AAAENCAPSATMMULTIPPPOENIPV6OE PVCEncapsulationType = 29
	PVCEncapsulationType_Value_AAAENCAPSETHDOT1QTUNNEL       PVCEncapsulationType = 30
	PVCEncapsulationType_Value_AAAENCAPSETHDOT1QTUNNELPPPOE  PVCEncapsulationType = 31
)

var PVCEncapsulationType_Strings = map[PVCEncapsulationType]string{
	PVCEncapsulationType_Value_AAAENCAPSATMRAW:               "AAA-ENCAPS-ATM-RAW",
	PVCEncapsulationType_Value_AAAENCAPSATMROUTE1483:         "AAA-ENCAPS-ATM-ROUTE1483",
	PVCEncapsulationType_Value_AAAENCAPSATMAUTO1483:          "AAA-ENCAPS-ATM-AUTO1483",
	PVCEncapsulationType_Value_AAAENCAPSATMMULTI:             "AAA-ENCAPS-ATM-MULTI",
	PVCEncapsulationType_Value_AAAENCAPSATMBRIDGE1483:        "AAA-ENCAPS-ATM-BRIDGE1483",
	PVCEncapsulationType_Value_AAAENCAPSATMPPP:               "AAA-ENCAPS-ATM-PPP",
	PVCEncapsulationType_Value_AAAENCAPSATMPPPSERIAL:         "AAA-ENCAPS-ATM-PPP-SERIAL",
	PVCEncapsulationType_Value_AAAENCAPSATMPPPNLPID:          "AAA-ENCAPS-ATM-PPP-NLPID",
	PVCEncapsulationType_Value_AAAENCAPSATMPPPAUTO:           "AAA-ENCAPS-ATM-PPP-AUTO",
	PVCEncapsulationType_Value_AAAENCAPSATMPPPOE:             "AAA-ENCAPS-ATM-PPPOE",
	PVCEncapsulationType_Value_AAAENCAPSATML2TP:              "AAA-ENCAPS-ATM-L2TP",
	PVCEncapsulationType_Value_AAAENCAPSATMPPPLLC:            "AAA-ENCAPS-ATM-PPP-LLC",
	PVCEncapsulationType_Value_AAAENCAPSFRAMEAUTO1490:        "AAA-ENCAPS-FRAME-AUTO1490",
	PVCEncapsulationType_Value_AAAENCAPSFRAMEMULTI:           "AAA-ENCAPS-FRAME-MULTI",
	PVCEncapsulationType_Value_AAAENCAPSFRAMEBRIDGE1490:      "AAA-ENCAPS-FRAME-BRIDGE1490",
	PVCEncapsulationType_Value_AAAENCAPSFRAMEPPP:             "AAA-ENCAPS-FRAME-PPP",
	PVCEncapsulationType_Value_AAAENCAPSFRAMEPPPAUTO:         "AAA-ENCAPS-FRAME-PPP-AUTO",
	PVCEncapsulationType_Value_AAAENCAPSFRAMEPPPOE:           "AAA-ENCAPS-FRAME-PPPOE",
	PVCEncapsulationType_Value_AAAENCAPSFRAMEROUTE1490:       "AAA-ENCAPS-FRAME-ROUTE1490",
	PVCEncapsulationType_Value_AAAENCAPSFRAMEL2TP:            "AAA-ENCAPS-FRAME-L2TP",
	PVCEncapsulationType_Value_AAAENCAPSL2TPVCMUXED:          "AAA-ENCAPS-L2TP-VC-MUXED",
	PVCEncapsulationType_Value_AAAENCAPSETH:                  "AAA-ENCAPS-ETH",
	PVCEncapsulationType_Value_AAAENCAPSETHPPPOE:             "AAA-ENCAPS-ETH-PPPOE",
	PVCEncapsulationType_Value_AAAENCAPSETHMULTI:             "AAA-ENCAPS-ETH-MULTI",
	PVCEncapsulationType_Value_AAAENCAPSETHDOT1Q:             "AAA-ENCAPS-ETH-DOT1Q",
	PVCEncapsulationType_Value_AAAENCAPSETHDOT1QPPPOE:        "AAA-ENCAPS-ETH-DOT1Q-PPPOE",
	PVCEncapsulationType_Value_AAAENCAPSATMMULTIPPPOE:        "AAA-ENCAPS-ATM-MULTI-PPPOE",
	PVCEncapsulationType_Value_AAAENCAPSATMMULTIIPV6OE:       "AAA-ENCAPS-ATM-MULTI-IPV6OE",
	PVCEncapsulationType_Value_AAAENCAPSATMMULTIPPPOENIPV6OE: "AAA-ENCAPS-ATM-MULTI-PPPOE-N-IPV6OE",
	PVCEncapsulationType_Value_AAAENCAPSETHDOT1QTUNNEL:       "AAA-ENCAPS-ETH-DOT1Q-TUNNEL",
	PVCEncapsulationType_Value_AAAENCAPSETHDOT1QTUNNELPPPOE:  "AAA-ENCAPS-ETH-DOT1Q-TUNNEL-PPPOE",
}

func (a PVCEncapsulationType) String() string {
	if str, ok := PVCEncapsulationType_Strings[a]; ok {
		return str
	}
	return "PVCEncapsulationType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PVCEncapsulationType_Add(p *radius.Packet, value PVCEncapsulationType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 39, a)
}

func PVCEncapsulationType_Get(p *radius.Packet) (value PVCEncapsulationType) {
	value, _ = PVCEncapsulationType_Lookup(p)
	return
}

func PVCEncapsulationType_Gets(p *radius.Packet) (values []PVCEncapsulationType, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 39) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PVCEncapsulationType(i))
	}
	return
}

func PVCEncapsulationType_Lookup(p *radius.Packet) (value PVCEncapsulationType, err error) {
	a, ok := _Redback_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PVCEncapsulationType(i)
	return
}

func PVCEncapsulationType_Set(p *radius.Packet, value PVCEncapsulationType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 39, a)
}

func PVCEncapsulationType_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 39)
}

func PVCProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 40, a)
}

func PVCProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 40, a)
}

func PVCProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = PVCProfileName_Lookup(p)
	return
}

func PVCProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = PVCProfileName_LookupString(p)
	return
}

func PVCProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PVCProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PVCProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PVCProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PVCProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 40, a)
}

func PVCProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 40, a)
}

func PVCProfileName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 40)
}

type PVCCircuitPadding uint32

const (
	PVCCircuitPadding_Value_AAACIRCUITPADDING   PVCCircuitPadding = 1
	PVCCircuitPadding_Value_AAACIRCUITNOPADDING PVCCircuitPadding = 2
)

var PVCCircuitPadding_Strings = map[PVCCircuitPadding]string{
	PVCCircuitPadding_Value_AAACIRCUITPADDING:   "AAA-CIRCUIT-PADDING",
	PVCCircuitPadding_Value_AAACIRCUITNOPADDING: "AAA-CIRCUIT-NO-PADDING",
}

func (a PVCCircuitPadding) String() string {
	if str, ok := PVCCircuitPadding_Strings[a]; ok {
		return str
	}
	return "PVCCircuitPadding(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PVCCircuitPadding_Add(p *radius.Packet, value PVCCircuitPadding) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 41, a)
}

func PVCCircuitPadding_Get(p *radius.Packet) (value PVCCircuitPadding) {
	value, _ = PVCCircuitPadding_Lookup(p)
	return
}

func PVCCircuitPadding_Gets(p *radius.Packet) (values []PVCCircuitPadding, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 41) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PVCCircuitPadding(i))
	}
	return
}

func PVCCircuitPadding_Lookup(p *radius.Packet) (value PVCCircuitPadding, err error) {
	a, ok := _Redback_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PVCCircuitPadding(i)
	return
}

func PVCCircuitPadding_Set(p *radius.Packet, value PVCCircuitPadding) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 41, a)
}

func PVCCircuitPadding_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 41)
}

type BindType uint32

const (
	BindType_Value_AAAAUTHBIND           BindType = 1
	BindType_Value_AAABYPASSBIND         BindType = 2
	BindType_Value_AAAINTERFACEBIND      BindType = 3
	BindType_Value_AAASUBSCRIBEBIND      BindType = 4
	BindType_Value_AAATUNNELBIND         BindType = 5
	BindType_Value_AAASESSIONBIND        BindType = 6
	BindType_Value_AAAQ8021BIND          BindType = 7
	BindType_Value_AAAMULTIBIND          BindType = 8
	BindType_Value_AAADHCPBIND           BindType = 9
	BindType_Value_AAAMULTIBINDSUB       BindType = 10
	BindType_Value_AAABRIDGEGROUPBIND    BindType = 11
	BindType_Value_AAAVLANBIND           BindType = 12
	BindType_Value_AAAVLANGROUPBIND      BindType = 13
	BindType_Value_AAAAUTOSUBSCRIBERBIND BindType = 14
)

var BindType_Strings = map[BindType]string{
	BindType_Value_AAAAUTHBIND:           "AAA-AUTH-BIND",
	BindType_Value_AAABYPASSBIND:         "AAA-BYPASS-BIND",
	BindType_Value_AAAINTERFACEBIND:      "AAA-INTERFACE-BIND",
	BindType_Value_AAASUBSCRIBEBIND:      "AAA-SUBSCRIBE-BIND",
	BindType_Value_AAATUNNELBIND:         "AAA-TUNNEL-BIND",
	BindType_Value_AAASESSIONBIND:        "AAA-SESSION-BIND",
	BindType_Value_AAAQ8021BIND:          "AAA-Q8021-BIND",
	BindType_Value_AAAMULTIBIND:          "AAA-MULTI-BIND",
	BindType_Value_AAADHCPBIND:           "AAA-DHCP-BIND",
	BindType_Value_AAAMULTIBINDSUB:       "AAA-MULTI-BIND-SUB",
	BindType_Value_AAABRIDGEGROUPBIND:    "AAA-BRIDGE-GROUP-BIND",
	BindType_Value_AAAVLANBIND:           "AAA-VLAN-BIND",
	BindType_Value_AAAVLANGROUPBIND:      "AAA-VLAN-GROUP-BIND",
	BindType_Value_AAAAUTOSUBSCRIBERBIND: "AAA-AUTO-SUBSCRIBER-BIND",
}

func (a BindType) String() string {
	if str, ok := BindType_Strings[a]; ok {
		return str
	}
	return "BindType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BindType_Add(p *radius.Packet, value BindType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 42, a)
}

func BindType_Get(p *radius.Packet) (value BindType) {
	value, _ = BindType_Lookup(p)
	return
}

func BindType_Gets(p *radius.Packet) (values []BindType, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 42) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BindType(i))
	}
	return
}

func BindType_Lookup(p *radius.Packet) (value BindType, err error) {
	a, ok := _Redback_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BindType(i)
	return
}

func BindType_Set(p *radius.Packet, value BindType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 42, a)
}

func BindType_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 42)
}

type BindAuthProtocol uint32

const (
	BindAuthProtocol_Value_AAAPPPPAP         BindAuthProtocol = 1
	BindAuthProtocol_Value_AAAPPPCHAP        BindAuthProtocol = 2
	BindAuthProtocol_Value_AAAPPPCHAPWAIT    BindAuthProtocol = 3
	BindAuthProtocol_Value_AAAPPPCHAPPAP     BindAuthProtocol = 4
	BindAuthProtocol_Value_AAAPPPCHAPWAITPAP BindAuthProtocol = 5
	BindAuthProtocol_Value_AAAPPPEAP         BindAuthProtocol = 6
	BindAuthProtocol_Value_AAAPPPPAPCHAP     BindAuthProtocol = 7
	BindAuthProtocol_Value_AAAPPPPAPCHAPWAIT BindAuthProtocol = 8
)

var BindAuthProtocol_Strings = map[BindAuthProtocol]string{
	BindAuthProtocol_Value_AAAPPPPAP:         "AAA-PPP-PAP",
	BindAuthProtocol_Value_AAAPPPCHAP:        "AAA-PPP-CHAP",
	BindAuthProtocol_Value_AAAPPPCHAPWAIT:    "AAA-PPP-CHAP-WAIT",
	BindAuthProtocol_Value_AAAPPPCHAPPAP:     "AAA-PPP-CHAP-PAP",
	BindAuthProtocol_Value_AAAPPPCHAPWAITPAP: "AAA-PPP-CHAP-WAIT-PAP",
	BindAuthProtocol_Value_AAAPPPEAP:         "AAA-PPP-EAP",
	BindAuthProtocol_Value_AAAPPPPAPCHAP:     "AAA-PPP-PAP-CHAP",
	BindAuthProtocol_Value_AAAPPPPAPCHAPWAIT: "AAA-PPP-PAP-CHAP-WAIT",
}

func (a BindAuthProtocol) String() string {
	if str, ok := BindAuthProtocol_Strings[a]; ok {
		return str
	}
	return "BindAuthProtocol(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BindAuthProtocol_Add(p *radius.Packet, value BindAuthProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 43, a)
}

func BindAuthProtocol_Get(p *radius.Packet) (value BindAuthProtocol) {
	value, _ = BindAuthProtocol_Lookup(p)
	return
}

func BindAuthProtocol_Gets(p *radius.Packet) (values []BindAuthProtocol, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 43) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BindAuthProtocol(i))
	}
	return
}

func BindAuthProtocol_Lookup(p *radius.Packet) (value BindAuthProtocol, err error) {
	a, ok := _Redback_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BindAuthProtocol(i)
	return
}

func BindAuthProtocol_Set(p *radius.Packet, value BindAuthProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 43, a)
}

func BindAuthProtocol_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 43)
}

type BindAuthMaxSessions uint32

var BindAuthMaxSessions_Strings = map[BindAuthMaxSessions]string{}

func (a BindAuthMaxSessions) String() string {
	if str, ok := BindAuthMaxSessions_Strings[a]; ok {
		return str
	}
	return "BindAuthMaxSessions(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BindAuthMaxSessions_Add(p *radius.Packet, value BindAuthMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 44, a)
}

func BindAuthMaxSessions_Get(p *radius.Packet) (value BindAuthMaxSessions) {
	value, _ = BindAuthMaxSessions_Lookup(p)
	return
}

func BindAuthMaxSessions_Gets(p *radius.Packet) (values []BindAuthMaxSessions, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 44) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BindAuthMaxSessions(i))
	}
	return
}

func BindAuthMaxSessions_Lookup(p *radius.Packet) (value BindAuthMaxSessions, err error) {
	a, ok := _Redback_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BindAuthMaxSessions(i)
	return
}

func BindAuthMaxSessions_Set(p *radius.Packet, value BindAuthMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 44, a)
}

func BindAuthMaxSessions_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 44)
}

func BindBypassBypass_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 45, a)
}

func BindBypassBypass_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 45, a)
}

func BindBypassBypass_Get(p *radius.Packet) (value []byte) {
	value, _ = BindBypassBypass_Lookup(p)
	return
}

func BindBypassBypass_GetString(p *radius.Packet) (value string) {
	value, _ = BindBypassBypass_LookupString(p)
	return
}

func BindBypassBypass_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 45) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindBypassBypass_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 45) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindBypassBypass_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindBypassBypass_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindBypassBypass_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 45, a)
}

func BindBypassBypass_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 45, a)
}

func BindBypassBypass_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 45)
}

func BindAuthContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 46, a)
}

func BindAuthContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 46, a)
}

func BindAuthContext_Get(p *radius.Packet) (value []byte) {
	value, _ = BindAuthContext_Lookup(p)
	return
}

func BindAuthContext_GetString(p *radius.Packet) (value string) {
	value, _ = BindAuthContext_LookupString(p)
	return
}

func BindAuthContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 46) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindAuthContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 46) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindAuthContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindAuthContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindAuthContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 46, a)
}

func BindAuthContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 46, a)
}

func BindAuthContext_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 46)
}

func BindAuthServiceGrp_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 47, a)
}

func BindAuthServiceGrp_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 47, a)
}

func BindAuthServiceGrp_Get(p *radius.Packet) (value []byte) {
	value, _ = BindAuthServiceGrp_Lookup(p)
	return
}

func BindAuthServiceGrp_GetString(p *radius.Packet) (value string) {
	value, _ = BindAuthServiceGrp_LookupString(p)
	return
}

func BindAuthServiceGrp_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 47) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindAuthServiceGrp_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 47) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindAuthServiceGrp_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindAuthServiceGrp_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindAuthServiceGrp_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 47, a)
}

func BindAuthServiceGrp_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 47, a)
}

func BindAuthServiceGrp_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 47)
}

func BindBypassContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 48, a)
}

func BindBypassContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 48, a)
}

func BindBypassContext_Get(p *radius.Packet) (value []byte) {
	value, _ = BindBypassContext_Lookup(p)
	return
}

func BindBypassContext_GetString(p *radius.Packet) (value string) {
	value, _ = BindBypassContext_LookupString(p)
	return
}

func BindBypassContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 48) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindBypassContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 48) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindBypassContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindBypassContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindBypassContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 48, a)
}

func BindBypassContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 48, a)
}

func BindBypassContext_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 48)
}

func BindIntContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 49, a)
}

func BindIntContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 49, a)
}

func BindIntContext_Get(p *radius.Packet) (value []byte) {
	value, _ = BindIntContext_Lookup(p)
	return
}

func BindIntContext_GetString(p *radius.Packet) (value string) {
	value, _ = BindIntContext_LookupString(p)
	return
}

func BindIntContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 49) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindIntContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 49) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindIntContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindIntContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindIntContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 49, a)
}

func BindIntContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 49, a)
}

func BindIntContext_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 49)
}

func BindTunContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 50, a)
}

func BindTunContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 50, a)
}

func BindTunContext_Get(p *radius.Packet) (value []byte) {
	value, _ = BindTunContext_Lookup(p)
	return
}

func BindTunContext_GetString(p *radius.Packet) (value string) {
	value, _ = BindTunContext_LookupString(p)
	return
}

func BindTunContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 50) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindTunContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 50) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindTunContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindTunContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindTunContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 50, a)
}

func BindTunContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 50, a)
}

func BindTunContext_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 50)
}

func BindSesContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 51, a)
}

func BindSesContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 51, a)
}

func BindSesContext_Get(p *radius.Packet) (value []byte) {
	value, _ = BindSesContext_Lookup(p)
	return
}

func BindSesContext_GetString(p *radius.Packet) (value string) {
	value, _ = BindSesContext_LookupString(p)
	return
}

func BindSesContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 51) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindSesContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 51) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindSesContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindSesContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindSesContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 51, a)
}

func BindSesContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 51, a)
}

func BindSesContext_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 51)
}

type BindDot1qSlot uint32

var BindDot1qSlot_Strings = map[BindDot1qSlot]string{}

func (a BindDot1qSlot) String() string {
	if str, ok := BindDot1qSlot_Strings[a]; ok {
		return str
	}
	return "BindDot1qSlot(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BindDot1qSlot_Add(p *radius.Packet, value BindDot1qSlot) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 52, a)
}

func BindDot1qSlot_Get(p *radius.Packet) (value BindDot1qSlot) {
	value, _ = BindDot1qSlot_Lookup(p)
	return
}

func BindDot1qSlot_Gets(p *radius.Packet) (values []BindDot1qSlot, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 52) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BindDot1qSlot(i))
	}
	return
}

func BindDot1qSlot_Lookup(p *radius.Packet) (value BindDot1qSlot, err error) {
	a, ok := _Redback_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BindDot1qSlot(i)
	return
}

func BindDot1qSlot_Set(p *radius.Packet, value BindDot1qSlot) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 52, a)
}

func BindDot1qSlot_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 52)
}

type BindDot1qPort uint32

var BindDot1qPort_Strings = map[BindDot1qPort]string{}

func (a BindDot1qPort) String() string {
	if str, ok := BindDot1qPort_Strings[a]; ok {
		return str
	}
	return "BindDot1qPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BindDot1qPort_Add(p *radius.Packet, value BindDot1qPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 53, a)
}

func BindDot1qPort_Get(p *radius.Packet) (value BindDot1qPort) {
	value, _ = BindDot1qPort_Lookup(p)
	return
}

func BindDot1qPort_Gets(p *radius.Packet) (values []BindDot1qPort, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 53) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BindDot1qPort(i))
	}
	return
}

func BindDot1qPort_Lookup(p *radius.Packet) (value BindDot1qPort, err error) {
	a, ok := _Redback_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BindDot1qPort(i)
	return
}

func BindDot1qPort_Set(p *radius.Packet, value BindDot1qPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 53, a)
}

func BindDot1qPort_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 53)
}

type BindDot1qVlanTagID uint32

var BindDot1qVlanTagID_Strings = map[BindDot1qVlanTagID]string{}

func (a BindDot1qVlanTagID) String() string {
	if str, ok := BindDot1qVlanTagID_Strings[a]; ok {
		return str
	}
	return "BindDot1qVlanTagID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BindDot1qVlanTagID_Add(p *radius.Packet, value BindDot1qVlanTagID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 54, a)
}

func BindDot1qVlanTagID_Get(p *radius.Packet) (value BindDot1qVlanTagID) {
	value, _ = BindDot1qVlanTagID_Lookup(p)
	return
}

func BindDot1qVlanTagID_Gets(p *radius.Packet) (values []BindDot1qVlanTagID, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 54) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BindDot1qVlanTagID(i))
	}
	return
}

func BindDot1qVlanTagID_Lookup(p *radius.Packet) (value BindDot1qVlanTagID, err error) {
	a, ok := _Redback_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BindDot1qVlanTagID(i)
	return
}

func BindDot1qVlanTagID_Set(p *radius.Packet, value BindDot1qVlanTagID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 54, a)
}

func BindDot1qVlanTagID_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 54)
}

func BindIntInterfaceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 55, a)
}

func BindIntInterfaceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 55, a)
}

func BindIntInterfaceName_Get(p *radius.Packet) (value []byte) {
	value, _ = BindIntInterfaceName_Lookup(p)
	return
}

func BindIntInterfaceName_GetString(p *radius.Packet) (value string) {
	value, _ = BindIntInterfaceName_LookupString(p)
	return
}

func BindIntInterfaceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 55) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindIntInterfaceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 55) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindIntInterfaceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindIntInterfaceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindIntInterfaceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 55, a)
}

func BindIntInterfaceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 55, a)
}

func BindIntInterfaceName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 55)
}

func BindL2TPTunnelName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 56, a)
}

func BindL2TPTunnelName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 56, a)
}

func BindL2TPTunnelName_Get(p *radius.Packet) (value []byte) {
	value, _ = BindL2TPTunnelName_Lookup(p)
	return
}

func BindL2TPTunnelName_GetString(p *radius.Packet) (value string) {
	value, _ = BindL2TPTunnelName_LookupString(p)
	return
}

func BindL2TPTunnelName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 56) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindL2TPTunnelName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 56) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindL2TPTunnelName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindL2TPTunnelName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindL2TPTunnelName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 56, a)
}

func BindL2TPTunnelName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 56, a)
}

func BindL2TPTunnelName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 56)
}

type BindL2TPFlowControl uint32

var BindL2TPFlowControl_Strings = map[BindL2TPFlowControl]string{}

func (a BindL2TPFlowControl) String() string {
	if str, ok := BindL2TPFlowControl_Strings[a]; ok {
		return str
	}
	return "BindL2TPFlowControl(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BindL2TPFlowControl_Add(p *radius.Packet, value BindL2TPFlowControl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 57, a)
}

func BindL2TPFlowControl_Get(p *radius.Packet) (value BindL2TPFlowControl) {
	value, _ = BindL2TPFlowControl_Lookup(p)
	return
}

func BindL2TPFlowControl_Gets(p *radius.Packet) (values []BindL2TPFlowControl, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 57) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BindL2TPFlowControl(i))
	}
	return
}

func BindL2TPFlowControl_Lookup(p *radius.Packet) (value BindL2TPFlowControl, err error) {
	a, ok := _Redback_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BindL2TPFlowControl(i)
	return
}

func BindL2TPFlowControl_Set(p *radius.Packet, value BindL2TPFlowControl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 57, a)
}

func BindL2TPFlowControl_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 57)
}

func BindSubUserAtContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 58, a)
}

func BindSubUserAtContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 58, a)
}

func BindSubUserAtContext_Get(p *radius.Packet) (value []byte) {
	value, _ = BindSubUserAtContext_Lookup(p)
	return
}

func BindSubUserAtContext_GetString(p *radius.Packet) (value string) {
	value, _ = BindSubUserAtContext_LookupString(p)
	return
}

func BindSubUserAtContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 58) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindSubUserAtContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 58) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindSubUserAtContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindSubUserAtContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindSubUserAtContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 58, a)
}

func BindSubUserAtContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 58, a)
}

func BindSubUserAtContext_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 58)
}

func BindSubPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 59, a)
}

func BindSubPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 59, a)
}

func BindSubPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = BindSubPassword_Lookup(p)
	return
}

func BindSubPassword_GetString(p *radius.Packet) (value string) {
	value, _ = BindSubPassword_LookupString(p)
	return
}

func BindSubPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 59) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindSubPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 59) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindSubPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindSubPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindSubPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 59, a)
}

func BindSubPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 59, a)
}

func BindSubPassword_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 59)
}

func IPHostAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 60, a)
}

func IPHostAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 60, a)
}

func IPHostAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = IPHostAddr_Lookup(p)
	return
}

func IPHostAddr_GetString(p *radius.Packet) (value string) {
	value, _ = IPHostAddr_LookupString(p)
	return
}

func IPHostAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 60) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPHostAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 60) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPHostAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IPHostAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IPHostAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 60, a)
}

func IPHostAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 60, a)
}

func IPHostAddr_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 60)
}

type IPTOSField uint32

const (
	IPTOSField_Value_Normal                                                 IPTOSField = 0
	IPTOSField_Value_MinCostOnly                                            IPTOSField = 1
	IPTOSField_Value_MaxReliabilityOnly                                     IPTOSField = 2
	IPTOSField_Value_MaxReliabilityPlusMinCost                              IPTOSField = 3
	IPTOSField_Value_MaxThroughputOnly                                      IPTOSField = 4
	IPTOSField_Value_MaxThroughputPlusMinCost                               IPTOSField = 5
	IPTOSField_Value_MaxThroughputPlusMaxReliability                        IPTOSField = 6
	IPTOSField_Value_MaxThroughputPlusMaxReliabilityPlusMinCost             IPTOSField = 7
	IPTOSField_Value_MinDelayOnly                                           IPTOSField = 8
	IPTOSField_Value_MinDelayPlusMinCost                                    IPTOSField = 9
	IPTOSField_Value_MinDelayPlusMaxReliability                             IPTOSField = 10
	IPTOSField_Value_MinDelayPlusMaxReliabilityPlusMinCost                  IPTOSField = 11
	IPTOSField_Value_MinDelayPlusMaxThroughput                              IPTOSField = 12
	IPTOSField_Value_MinDelayPlusMaxThroughputPlusMinCost                   IPTOSField = 13
	IPTOSField_Value_MinDelayPlusMaxThroughputPlusMaxReliability            IPTOSField = 14
	IPTOSField_Value_MinDelayPlusMaxThroughputPlusMaxReliabilityPlusMinCost IPTOSField = 15
)

var IPTOSField_Strings = map[IPTOSField]string{
	IPTOSField_Value_Normal:                                                 "normal",
	IPTOSField_Value_MinCostOnly:                                            "min-cost-only",
	IPTOSField_Value_MaxReliabilityOnly:                                     "max-reliability-only",
	IPTOSField_Value_MaxReliabilityPlusMinCost:                              "max-reliability-plus-min-cost",
	IPTOSField_Value_MaxThroughputOnly:                                      "max-throughput-only",
	IPTOSField_Value_MaxThroughputPlusMinCost:                               "max-throughput-plus-min-cost",
	IPTOSField_Value_MaxThroughputPlusMaxReliability:                        "max-throughput-plus-max-reliability",
	IPTOSField_Value_MaxThroughputPlusMaxReliabilityPlusMinCost:             "max-throughput-plus-max-reliability-plus-min-cost",
	IPTOSField_Value_MinDelayOnly:                                           "min-delay-only",
	IPTOSField_Value_MinDelayPlusMinCost:                                    "min-delay-plus-min-cost",
	IPTOSField_Value_MinDelayPlusMaxReliability:                             "min-delay-plus-max-reliability",
	IPTOSField_Value_MinDelayPlusMaxReliabilityPlusMinCost:                  "min-delay-plus-max-reliability-plus-min-cost",
	IPTOSField_Value_MinDelayPlusMaxThroughput:                              "min-delay-plus-max-throughput",
	IPTOSField_Value_MinDelayPlusMaxThroughputPlusMinCost:                   "min-delay-plus-max-throughput-plus-min-cost",
	IPTOSField_Value_MinDelayPlusMaxThroughputPlusMaxReliability:            "min-delay-plus-max-throughput-plus-max-reliability",
	IPTOSField_Value_MinDelayPlusMaxThroughputPlusMaxReliabilityPlusMinCost: "min-delay-plus-max-throughput-plus-max-reliability-plus-min-cost",
}

func (a IPTOSField) String() string {
	if str, ok := IPTOSField_Strings[a]; ok {
		return str
	}
	return "IPTOSField(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func IPTOSField_Add(p *radius.Packet, value IPTOSField) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 61, a)
}

func IPTOSField_Get(p *radius.Packet) (value IPTOSField) {
	value, _ = IPTOSField_Lookup(p)
	return
}

func IPTOSField_Gets(p *radius.Packet) (values []IPTOSField, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 61) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, IPTOSField(i))
	}
	return
}

func IPTOSField_Lookup(p *radius.Packet) (value IPTOSField, err error) {
	a, ok := _Redback_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = IPTOSField(i)
	return
}

func IPTOSField_Set(p *radius.Packet, value IPTOSField) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 61, a)
}

func IPTOSField_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 61)
}

type NASRealPort uint32

var NASRealPort_Strings = map[NASRealPort]string{}

func (a NASRealPort) String() string {
	if str, ok := NASRealPort_Strings[a]; ok {
		return str
	}
	return "NASRealPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NASRealPort_Add(p *radius.Packet, value NASRealPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 62, a)
}

func NASRealPort_Get(p *radius.Packet) (value NASRealPort) {
	value, _ = NASRealPort_Lookup(p)
	return
}

func NASRealPort_Gets(p *radius.Packet) (values []NASRealPort, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 62) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NASRealPort(i))
	}
	return
}

func NASRealPort_Lookup(p *radius.Packet) (value NASRealPort, err error) {
	a, ok := _Redback_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NASRealPort(i)
	return
}

func NASRealPort_Set(p *radius.Packet, value NASRealPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 62, a)
}

func NASRealPort_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 62)
}

func TunnelSessionAuthCtx_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 63, a)
}

func TunnelSessionAuthCtx_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 63, a)
}

func TunnelSessionAuthCtx_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelSessionAuthCtx_Lookup(p)
	return
}

func TunnelSessionAuthCtx_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelSessionAuthCtx_LookupString(p)
	return
}

func TunnelSessionAuthCtx_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 63) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelSessionAuthCtx_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 63) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelSessionAuthCtx_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelSessionAuthCtx_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelSessionAuthCtx_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 63, a)
}

func TunnelSessionAuthCtx_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 63, a)
}

func TunnelSessionAuthCtx_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 63)
}

func TunnelSessionAuthServiceGrp_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 64, a)
}

func TunnelSessionAuthServiceGrp_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 64, a)
}

func TunnelSessionAuthServiceGrp_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelSessionAuthServiceGrp_Lookup(p)
	return
}

func TunnelSessionAuthServiceGrp_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelSessionAuthServiceGrp_LookupString(p)
	return
}

func TunnelSessionAuthServiceGrp_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 64) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelSessionAuthServiceGrp_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 64) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelSessionAuthServiceGrp_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelSessionAuthServiceGrp_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelSessionAuthServiceGrp_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 64, a)
}

func TunnelSessionAuthServiceGrp_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 64, a)
}

func TunnelSessionAuthServiceGrp_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 64)
}

type TunnelRateLimitRate uint32

var TunnelRateLimitRate_Strings = map[TunnelRateLimitRate]string{}

func (a TunnelRateLimitRate) String() string {
	if str, ok := TunnelRateLimitRate_Strings[a]; ok {
		return str
	}
	return "TunnelRateLimitRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelRateLimitRate_Add(p *radius.Packet, value TunnelRateLimitRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 65, a)
}

func TunnelRateLimitRate_Get(p *radius.Packet) (value TunnelRateLimitRate) {
	value, _ = TunnelRateLimitRate_Lookup(p)
	return
}

func TunnelRateLimitRate_Gets(p *radius.Packet) (values []TunnelRateLimitRate, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 65) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelRateLimitRate(i))
	}
	return
}

func TunnelRateLimitRate_Lookup(p *radius.Packet) (value TunnelRateLimitRate, err error) {
	a, ok := _Redback_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelRateLimitRate(i)
	return
}

func TunnelRateLimitRate_Set(p *radius.Packet, value TunnelRateLimitRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 65, a)
}

func TunnelRateLimitRate_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 65)
}

type TunnelRateLimitBurst uint32

var TunnelRateLimitBurst_Strings = map[TunnelRateLimitBurst]string{}

func (a TunnelRateLimitBurst) String() string {
	if str, ok := TunnelRateLimitBurst_Strings[a]; ok {
		return str
	}
	return "TunnelRateLimitBurst(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelRateLimitBurst_Add(p *radius.Packet, value TunnelRateLimitBurst) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 66, a)
}

func TunnelRateLimitBurst_Get(p *radius.Packet) (value TunnelRateLimitBurst) {
	value, _ = TunnelRateLimitBurst_Lookup(p)
	return
}

func TunnelRateLimitBurst_Gets(p *radius.Packet) (values []TunnelRateLimitBurst, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 66) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelRateLimitBurst(i))
	}
	return
}

func TunnelRateLimitBurst_Lookup(p *radius.Packet) (value TunnelRateLimitBurst, err error) {
	a, ok := _Redback_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelRateLimitBurst(i)
	return
}

func TunnelRateLimitBurst_Set(p *radius.Packet, value TunnelRateLimitBurst) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 66, a)
}

func TunnelRateLimitBurst_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 66)
}

type TunnelPoliceRate uint32

var TunnelPoliceRate_Strings = map[TunnelPoliceRate]string{}

func (a TunnelPoliceRate) String() string {
	if str, ok := TunnelPoliceRate_Strings[a]; ok {
		return str
	}
	return "TunnelPoliceRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelPoliceRate_Add(p *radius.Packet, value TunnelPoliceRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 67, a)
}

func TunnelPoliceRate_Get(p *radius.Packet) (value TunnelPoliceRate) {
	value, _ = TunnelPoliceRate_Lookup(p)
	return
}

func TunnelPoliceRate_Gets(p *radius.Packet) (values []TunnelPoliceRate, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 67) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelPoliceRate(i))
	}
	return
}

func TunnelPoliceRate_Lookup(p *radius.Packet) (value TunnelPoliceRate, err error) {
	a, ok := _Redback_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelPoliceRate(i)
	return
}

func TunnelPoliceRate_Set(p *radius.Packet, value TunnelPoliceRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 67, a)
}

func TunnelPoliceRate_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 67)
}

type TunnelPoliceBurst uint32

var TunnelPoliceBurst_Strings = map[TunnelPoliceBurst]string{}

func (a TunnelPoliceBurst) String() string {
	if str, ok := TunnelPoliceBurst_Strings[a]; ok {
		return str
	}
	return "TunnelPoliceBurst(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelPoliceBurst_Add(p *radius.Packet, value TunnelPoliceBurst) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 68, a)
}

func TunnelPoliceBurst_Get(p *radius.Packet) (value TunnelPoliceBurst) {
	value, _ = TunnelPoliceBurst_Lookup(p)
	return
}

func TunnelPoliceBurst_Gets(p *radius.Packet) (values []TunnelPoliceBurst, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 68) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelPoliceBurst(i))
	}
	return
}

func TunnelPoliceBurst_Lookup(p *radius.Packet) (value TunnelPoliceBurst, err error) {
	a, ok := _Redback_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelPoliceBurst(i)
	return
}

func TunnelPoliceBurst_Set(p *radius.Packet, value TunnelPoliceBurst) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 68, a)
}

func TunnelPoliceBurst_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 68)
}

func TunnelL2FSecondPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 69, a)
}

func TunnelL2FSecondPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 69, a)
}

func TunnelL2FSecondPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelL2FSecondPassword_Lookup(p)
	return
}

func TunnelL2FSecondPassword_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelL2FSecondPassword_LookupString(p)
	return
}

func TunnelL2FSecondPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 69) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelL2FSecondPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 69) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelL2FSecondPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelL2FSecondPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelL2FSecondPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 69, a)
}

func TunnelL2FSecondPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 69, a)
}

func TunnelL2FSecondPassword_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 69)
}

func ACLDefinition_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 70, a)
}

func ACLDefinition_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 70, a)
}

func ACLDefinition_Get(p *radius.Packet) (value []byte) {
	value, _ = ACLDefinition_Lookup(p)
	return
}

func ACLDefinition_GetString(p *radius.Packet) (value string) {
	value, _ = ACLDefinition_LookupString(p)
	return
}

func ACLDefinition_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 70) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ACLDefinition_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 70) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ACLDefinition_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ACLDefinition_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ACLDefinition_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 70, a)
}

func ACLDefinition_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 70, a)
}

func ACLDefinition_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 70)
}

func PPPoEIPRouteAdd_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 71, a)
}

func PPPoEIPRouteAdd_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 71, a)
}

func PPPoEIPRouteAdd_Get(p *radius.Packet) (value []byte) {
	value, _ = PPPoEIPRouteAdd_Lookup(p)
	return
}

func PPPoEIPRouteAdd_GetString(p *radius.Packet) (value string) {
	value, _ = PPPoEIPRouteAdd_LookupString(p)
	return
}

func PPPoEIPRouteAdd_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 71) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PPPoEIPRouteAdd_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 71) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PPPoEIPRouteAdd_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PPPoEIPRouteAdd_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PPPoEIPRouteAdd_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 71, a)
}

func PPPoEIPRouteAdd_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 71, a)
}

func PPPoEIPRouteAdd_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 71)
}

type TTYLevelMax uint32

var TTYLevelMax_Strings = map[TTYLevelMax]string{}

func (a TTYLevelMax) String() string {
	if str, ok := TTYLevelMax_Strings[a]; ok {
		return str
	}
	return "TTYLevelMax(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TTYLevelMax_Add(p *radius.Packet, value TTYLevelMax) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 72, a)
}

func TTYLevelMax_Get(p *radius.Packet) (value TTYLevelMax) {
	value, _ = TTYLevelMax_Lookup(p)
	return
}

func TTYLevelMax_Gets(p *radius.Packet) (values []TTYLevelMax, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 72) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TTYLevelMax(i))
	}
	return
}

func TTYLevelMax_Lookup(p *radius.Packet) (value TTYLevelMax, err error) {
	a, ok := _Redback_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TTYLevelMax(i)
	return
}

func TTYLevelMax_Set(p *radius.Packet, value TTYLevelMax) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 72, a)
}

func TTYLevelMax_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 72)
}

type TTYLevelStart uint32

var TTYLevelStart_Strings = map[TTYLevelStart]string{}

func (a TTYLevelStart) String() string {
	if str, ok := TTYLevelStart_Strings[a]; ok {
		return str
	}
	return "TTYLevelStart(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TTYLevelStart_Add(p *radius.Packet, value TTYLevelStart) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 73, a)
}

func TTYLevelStart_Get(p *radius.Packet) (value TTYLevelStart) {
	value, _ = TTYLevelStart_Lookup(p)
	return
}

func TTYLevelStart_Gets(p *radius.Packet) (values []TTYLevelStart, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 73) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TTYLevelStart(i))
	}
	return
}

func TTYLevelStart_Lookup(p *radius.Packet) (value TTYLevelStart, err error) {
	a, ok := _Redback_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TTYLevelStart(i)
	return
}

func TTYLevelStart_Set(p *radius.Packet, value TTYLevelStart) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 73, a)
}

func TTYLevelStart_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 73)
}

type TunnelChecksum uint32

var TunnelChecksum_Strings = map[TunnelChecksum]string{}

func (a TunnelChecksum) String() string {
	if str, ok := TunnelChecksum_Strings[a]; ok {
		return str
	}
	return "TunnelChecksum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelChecksum_Add(p *radius.Packet, value TunnelChecksum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 74, a)
}

func TunnelChecksum_Get(p *radius.Packet) (value TunnelChecksum) {
	value, _ = TunnelChecksum_Lookup(p)
	return
}

func TunnelChecksum_Gets(p *radius.Packet) (values []TunnelChecksum, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 74) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelChecksum(i))
	}
	return
}

func TunnelChecksum_Lookup(p *radius.Packet) (value TunnelChecksum, err error) {
	a, ok := _Redback_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelChecksum(i)
	return
}

func TunnelChecksum_Set(p *radius.Packet, value TunnelChecksum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 74, a)
}

func TunnelChecksum_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 74)
}

func TunnelProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 75, a)
}

func TunnelProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 75, a)
}

func TunnelProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelProfile_Lookup(p)
	return
}

func TunnelProfile_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelProfile_LookupString(p)
	return
}

func TunnelProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 75) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 75) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 75, a)
}

func TunnelProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 75, a)
}

func TunnelProfile_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 75)
}

func TunnelClientVPN_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 78, a)
}

func TunnelClientVPN_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 78, a)
}

func TunnelClientVPN_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelClientVPN_Lookup(p)
	return
}

func TunnelClientVPN_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelClientVPN_LookupString(p)
	return
}

func TunnelClientVPN_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 78) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelClientVPN_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 78) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelClientVPN_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelClientVPN_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelClientVPN_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 78, a)
}

func TunnelClientVPN_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 78, a)
}

func TunnelClientVPN_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 78)
}

func TunnelServerVPN_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 79, a)
}

func TunnelServerVPN_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 79, a)
}

func TunnelServerVPN_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelServerVPN_Lookup(p)
	return
}

func TunnelServerVPN_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelServerVPN_LookupString(p)
	return
}

func TunnelServerVPN_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 79) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelServerVPN_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 79) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelServerVPN_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelServerVPN_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelServerVPN_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 79, a)
}

func TunnelServerVPN_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 79, a)
}

func TunnelServerVPN_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 79)
}

func TunnelClientRhost_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 80, a)
}

func TunnelClientRhost_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 80, a)
}

func TunnelClientRhost_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelClientRhost_Lookup(p)
	return
}

func TunnelClientRhost_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelClientRhost_LookupString(p)
	return
}

func TunnelClientRhost_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 80) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelClientRhost_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 80) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelClientRhost_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelClientRhost_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelClientRhost_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 80, a)
}

func TunnelClientRhost_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 80, a)
}

func TunnelClientRhost_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 80)
}

func TunnelServerRhost_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 81, a)
}

func TunnelServerRhost_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 81, a)
}

func TunnelServerRhost_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelServerRhost_Lookup(p)
	return
}

func TunnelServerRhost_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelServerRhost_LookupString(p)
	return
}

func TunnelServerRhost_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 81) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelServerRhost_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 81) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelServerRhost_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelServerRhost_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelServerRhost_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 81, a)
}

func TunnelServerRhost_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 81, a)
}

func TunnelServerRhost_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 81)
}

func TunnelClientIntAddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 82, a)
}

func TunnelClientIntAddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = TunnelClientIntAddr_Lookup(p)
	return
}

func TunnelClientIntAddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Redback_GetsVendor(p, 82) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelClientIntAddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Redback_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func TunnelClientIntAddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 82, a)
}

func TunnelClientIntAddr_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 82)
}

func TunnelServerIntAddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 83, a)
}

func TunnelServerIntAddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = TunnelServerIntAddr_Lookup(p)
	return
}

func TunnelServerIntAddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Redback_GetsVendor(p, 83) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelServerIntAddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Redback_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func TunnelServerIntAddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 83, a)
}

func TunnelServerIntAddr_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 83)
}

type PPPCompression uint32

var PPPCompression_Strings = map[PPPCompression]string{}

func (a PPPCompression) String() string {
	if str, ok := PPPCompression_Strings[a]; ok {
		return str
	}
	return "PPPCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PPPCompression_Add(p *radius.Packet, value PPPCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 84, a)
}

func PPPCompression_Get(p *radius.Packet) (value PPPCompression) {
	value, _ = PPPCompression_Lookup(p)
	return
}

func PPPCompression_Gets(p *radius.Packet) (values []PPPCompression, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 84) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PPPCompression(i))
	}
	return
}

func PPPCompression_Lookup(p *radius.Packet) (value PPPCompression, err error) {
	a, ok := _Redback_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PPPCompression(i)
	return
}

func PPPCompression_Set(p *radius.Packet, value PPPCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 84, a)
}

func PPPCompression_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 84)
}

type TunnelHelloTimer uint32

var TunnelHelloTimer_Strings = map[TunnelHelloTimer]string{}

func (a TunnelHelloTimer) String() string {
	if str, ok := TunnelHelloTimer_Strings[a]; ok {
		return str
	}
	return "TunnelHelloTimer(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TunnelHelloTimer_Add(p *radius.Packet, tag byte, value TunnelHelloTimer) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Redback_AddVendor(p, 85, a)
}

func TunnelHelloTimer_Get(p *radius.Packet) (tag byte, value TunnelHelloTimer) {
	tag, value, _ = TunnelHelloTimer_Lookup(p)
	return
}

func TunnelHelloTimer_Gets(p *radius.Packet) (tags []byte, values []TunnelHelloTimer, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 85) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr[0] = 0x00
		}
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TunnelHelloTimer(i))
		tags = append(tags, tag)
	}
	return
}

func TunnelHelloTimer_Lookup(p *radius.Packet) (tag byte, value TunnelHelloTimer, err error) {
	a, ok := _Redback_LookupVendor(p, 85)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a[0] = 0x00
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TunnelHelloTimer(i)
	return
}

func TunnelHelloTimer_Set(p *radius.Packet, tag byte, value TunnelHelloTimer) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Redback_SetVendor(p, 85, a)
}

func TunnelHelloTimer_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 85)
}

type RedbackReason uint32

var RedbackReason_Strings = map[RedbackReason]string{}

func (a RedbackReason) String() string {
	if str, ok := RedbackReason_Strings[a]; ok {
		return str
	}
	return "RedbackReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RedbackReason_Add(p *radius.Packet, value RedbackReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 86, a)
}

func RedbackReason_Get(p *radius.Packet) (value RedbackReason) {
	value, _ = RedbackReason_Lookup(p)
	return
}

func RedbackReason_Gets(p *radius.Packet) (values []RedbackReason, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 86) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RedbackReason(i))
	}
	return
}

func RedbackReason_Lookup(p *radius.Packet) (value RedbackReason, err error) {
	a, ok := _Redback_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RedbackReason(i)
	return
}

func RedbackReason_Set(p *radius.Packet, value RedbackReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 86, a)
}

func RedbackReason_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 86)
}

func QosPolicingProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 87, a)
}

func QosPolicingProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 87, a)
}

func QosPolicingProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = QosPolicingProfileName_Lookup(p)
	return
}

func QosPolicingProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = QosPolicingProfileName_LookupString(p)
	return
}

func QosPolicingProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 87) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QosPolicingProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 87) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QosPolicingProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 87)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QosPolicingProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 87)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QosPolicingProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 87, a)
}

func QosPolicingProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 87, a)
}

func QosPolicingProfileName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 87)
}

func QosMeteringProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 88, a)
}

func QosMeteringProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 88, a)
}

func QosMeteringProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = QosMeteringProfileName_Lookup(p)
	return
}

func QosMeteringProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = QosMeteringProfileName_LookupString(p)
	return
}

func QosMeteringProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 88) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QosMeteringProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 88) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QosMeteringProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QosMeteringProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QosMeteringProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 88, a)
}

func QosMeteringProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 88, a)
}

func QosMeteringProfileName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 88)
}

func QosPolicyQueuing_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 89, a)
}

func QosPolicyQueuing_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 89, a)
}

func QosPolicyQueuing_Get(p *radius.Packet) (value []byte) {
	value, _ = QosPolicyQueuing_Lookup(p)
	return
}

func QosPolicyQueuing_GetString(p *radius.Packet) (value string) {
	value, _ = QosPolicyQueuing_LookupString(p)
	return
}

func QosPolicyQueuing_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 89) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QosPolicyQueuing_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 89) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QosPolicyQueuing_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QosPolicyQueuing_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QosPolicyQueuing_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 89, a)
}

func QosPolicyQueuing_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 89, a)
}

func QosPolicyQueuing_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 89)
}

func IGMPServiceProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 90, a)
}

func IGMPServiceProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 90, a)
}

func IGMPServiceProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = IGMPServiceProfileName_Lookup(p)
	return
}

func IGMPServiceProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = IGMPServiceProfileName_LookupString(p)
	return
}

func IGMPServiceProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 90) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IGMPServiceProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 90) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IGMPServiceProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IGMPServiceProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IGMPServiceProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 90, a)
}

func IGMPServiceProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 90, a)
}

func IGMPServiceProfileName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 90)
}

func SubscriberProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 91, a)
}

func SubscriberProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 91, a)
}

func SubscriberProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = SubscriberProfileName_Lookup(p)
	return
}

func SubscriberProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = SubscriberProfileName_LookupString(p)
	return
}

func SubscriberProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 91) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SubscriberProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 91) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SubscriberProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SubscriberProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SubscriberProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 91, a)
}

func SubscriberProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 91, a)
}

func SubscriberProfileName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 91)
}

func ForwardPolicy_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 92, a)
}

func ForwardPolicy_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 92, a)
}

func ForwardPolicy_Get(p *radius.Packet) (value []byte) {
	value, _ = ForwardPolicy_Lookup(p)
	return
}

func ForwardPolicy_GetString(p *radius.Packet) (value string) {
	value, _ = ForwardPolicy_LookupString(p)
	return
}

func ForwardPolicy_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 92) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ForwardPolicy_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 92) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ForwardPolicy_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ForwardPolicy_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ForwardPolicy_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 92, a)
}

func ForwardPolicy_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 92, a)
}

func ForwardPolicy_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 92)
}

func RemotePort_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 93, a)
}

func RemotePort_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 93, a)
}

func RemotePort_Get(p *radius.Packet) (value []byte) {
	value, _ = RemotePort_Lookup(p)
	return
}

func RemotePort_GetString(p *radius.Packet) (value string) {
	value, _ = RemotePort_LookupString(p)
	return
}

func RemotePort_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 93) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RemotePort_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 93) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RemotePort_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RemotePort_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RemotePort_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 93, a)
}

func RemotePort_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 93, a)
}

func RemotePort_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 93)
}

func Reauth_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 94, a)
}

func Reauth_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 94, a)
}

func Reauth_Get(p *radius.Packet) (value []byte) {
	value, _ = Reauth_Lookup(p)
	return
}

func Reauth_GetString(p *radius.Packet) (value string) {
	value, _ = Reauth_LookupString(p)
	return
}

func Reauth_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 94) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Reauth_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 94) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Reauth_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func Reauth_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func Reauth_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 94, a)
}

func Reauth_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 94, a)
}

func Reauth_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 94)
}

type ReauthMore uint32

var ReauthMore_Strings = map[ReauthMore]string{}

func (a ReauthMore) String() string {
	if str, ok := ReauthMore_Strings[a]; ok {
		return str
	}
	return "ReauthMore(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ReauthMore_Add(p *radius.Packet, value ReauthMore) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 95, a)
}

func ReauthMore_Get(p *radius.Packet) (value ReauthMore) {
	value, _ = ReauthMore_Lookup(p)
	return
}

func ReauthMore_Gets(p *radius.Packet) (values []ReauthMore, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 95) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ReauthMore(i))
	}
	return
}

func ReauthMore_Lookup(p *radius.Packet) (value ReauthMore, err error) {
	a, ok := _Redback_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ReauthMore(i)
	return
}

func ReauthMore_Set(p *radius.Packet, value ReauthMore) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 95, a)
}

func ReauthMore_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 95)
}

func AgentRemoteID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 96, a)
}

func AgentRemoteID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 96, a)
}

func AgentRemoteID_Get(p *radius.Packet) (value []byte) {
	value, _ = AgentRemoteID_Lookup(p)
	return
}

func AgentRemoteID_GetString(p *radius.Packet) (value string) {
	value, _ = AgentRemoteID_LookupString(p)
	return
}

func AgentRemoteID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 96) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AgentRemoteID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 96) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AgentRemoteID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AgentRemoteID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AgentRemoteID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 96, a)
}

func AgentRemoteID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 96, a)
}

func AgentRemoteID_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 96)
}

func AgentCircuitID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 97, a)
}

func AgentCircuitID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 97, a)
}

func AgentCircuitID_Get(p *radius.Packet) (value []byte) {
	value, _ = AgentCircuitID_Lookup(p)
	return
}

func AgentCircuitID_GetString(p *radius.Packet) (value string) {
	value, _ = AgentCircuitID_LookupString(p)
	return
}

func AgentCircuitID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 97) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AgentCircuitID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 97) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AgentCircuitID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AgentCircuitID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AgentCircuitID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 97, a)
}

func AgentCircuitID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 97, a)
}

func AgentCircuitID_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 97)
}

type PlatformType uint32

const (
	PlatformType_Value_SMS          PlatformType = 1
	PlatformType_Value_SmartEdge800 PlatformType = 2
	PlatformType_Value_SE400        PlatformType = 3
	PlatformType_Value_SE100        PlatformType = 4
)

var PlatformType_Strings = map[PlatformType]string{
	PlatformType_Value_SMS:          "SMS",
	PlatformType_Value_SmartEdge800: "SmartEdge-800",
	PlatformType_Value_SE400:        "SE-400",
	PlatformType_Value_SE100:        "SE-100",
}

func (a PlatformType) String() string {
	if str, ok := PlatformType_Strings[a]; ok {
		return str
	}
	return "PlatformType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PlatformType_Add(p *radius.Packet, value PlatformType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 98, a)
}

func PlatformType_Get(p *radius.Packet) (value PlatformType) {
	value, _ = PlatformType_Lookup(p)
	return
}

func PlatformType_Gets(p *radius.Packet) (values []PlatformType, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 98) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PlatformType(i))
	}
	return
}

func PlatformType_Lookup(p *radius.Packet) (value PlatformType, err error) {
	a, ok := _Redback_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PlatformType(i)
	return
}

func PlatformType_Set(p *radius.Packet, value PlatformType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 98, a)
}

func PlatformType_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 98)
}

func ClientNBNSPri_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 99, a)
}

func ClientNBNSPri_Get(p *radius.Packet) (value net.IP) {
	value, _ = ClientNBNSPri_Lookup(p)
	return
}

func ClientNBNSPri_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Redback_GetsVendor(p, 99) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClientNBNSPri_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Redback_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ClientNBNSPri_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 99, a)
}

func ClientNBNSPri_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 99)
}

func ClientNBNSSec_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 100, a)
}

func ClientNBNSSec_Get(p *radius.Packet) (value net.IP) {
	value, _ = ClientNBNSSec_Lookup(p)
	return
}

func ClientNBNSSec_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Redback_GetsVendor(p, 100) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClientNBNSSec_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Redback_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ClientNBNSSec_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 100, a)
}

func ClientNBNSSec_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 100)
}

func ShapingProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 101, a)
}

func ShapingProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 101, a)
}

func ShapingProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = ShapingProfileName_Lookup(p)
	return
}

func ShapingProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = ShapingProfileName_LookupString(p)
	return
}

func ShapingProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 101) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShapingProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 101) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShapingProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShapingProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShapingProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 101, a)
}

func ShapingProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 101, a)
}

func ShapingProfileName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 101)
}

type BGCctAddrMax uint32

var BGCctAddrMax_Strings = map[BGCctAddrMax]string{}

func (a BGCctAddrMax) String() string {
	if str, ok := BGCctAddrMax_Strings[a]; ok {
		return str
	}
	return "BGCctAddrMax(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BGCctAddrMax_Add(p *radius.Packet, value BGCctAddrMax) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 103, a)
}

func BGCctAddrMax_Get(p *radius.Packet) (value BGCctAddrMax) {
	value, _ = BGCctAddrMax_Lookup(p)
	return
}

func BGCctAddrMax_Gets(p *radius.Packet) (values []BGCctAddrMax, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BGCctAddrMax(i))
	}
	return
}

func BGCctAddrMax_Lookup(p *radius.Packet) (value BGCctAddrMax, err error) {
	a, ok := _Redback_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BGCctAddrMax(i)
	return
}

func BGCctAddrMax_Set(p *radius.Packet, value BGCctAddrMax) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 103, a)
}

func BGCctAddrMax_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 103)
}

func IPInterfaceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 104, a)
}

func IPInterfaceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 104, a)
}

func IPInterfaceName_Get(p *radius.Packet) (value []byte) {
	value, _ = IPInterfaceName_Lookup(p)
	return
}

func IPInterfaceName_GetString(p *radius.Packet) (value string) {
	value, _ = IPInterfaceName_LookupString(p)
	return
}

func IPInterfaceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPInterfaceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPInterfaceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IPInterfaceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IPInterfaceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 104, a)
}

func IPInterfaceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 104, a)
}

func IPInterfaceName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 104)
}

func NATPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 105, a)
}

func NATPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 105, a)
}

func NATPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = NATPolicyName_Lookup(p)
	return
}

func NATPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = NATPolicyName_LookupString(p)
	return
}

func NATPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 105) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NATPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 105) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NATPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NATPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NATPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 105, a)
}

func NATPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 105, a)
}

func NATPolicyName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 105)
}

func RBNPMServiceID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 106, a)
}

func RBNPMServiceID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 106, a)
}

func RBNPMServiceID_Get(p *radius.Packet) (value []byte) {
	value, _ = RBNPMServiceID_Lookup(p)
	return
}

func RBNPMServiceID_GetString(p *radius.Packet) (value string) {
	value, _ = RBNPMServiceID_LookupString(p)
	return
}

func RBNPMServiceID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 106) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RBNPMServiceID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 106) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RBNPMServiceID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RBNPMServiceID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RBNPMServiceID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 106, a)
}

func RBNPMServiceID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 106, a)
}

func RBNPMServiceID_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 106)
}

func HTTPRedirectProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 107, a)
}

func HTTPRedirectProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 107, a)
}

func HTTPRedirectProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = HTTPRedirectProfileName_Lookup(p)
	return
}

func HTTPRedirectProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = HTTPRedirectProfileName_LookupString(p)
	return
}

func HTTPRedirectProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 107) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HTTPRedirectProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 107) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HTTPRedirectProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HTTPRedirectProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HTTPRedirectProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 107, a)
}

func HTTPRedirectProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 107, a)
}

func HTTPRedirectProfileName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 107)
}

func BindAutoSubUser_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 108, a)
}

func BindAutoSubUser_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 108, a)
}

func BindAutoSubUser_Get(p *radius.Packet) (value []byte) {
	value, _ = BindAutoSubUser_Lookup(p)
	return
}

func BindAutoSubUser_GetString(p *radius.Packet) (value string) {
	value, _ = BindAutoSubUser_LookupString(p)
	return
}

func BindAutoSubUser_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 108) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindAutoSubUser_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 108) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindAutoSubUser_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindAutoSubUser_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindAutoSubUser_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 108, a)
}

func BindAutoSubUser_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 108, a)
}

func BindAutoSubUser_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 108)
}

func BindAutoSubContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 109, a)
}

func BindAutoSubContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 109, a)
}

func BindAutoSubContext_Get(p *radius.Packet) (value []byte) {
	value, _ = BindAutoSubContext_Lookup(p)
	return
}

func BindAutoSubContext_GetString(p *radius.Packet) (value string) {
	value, _ = BindAutoSubContext_LookupString(p)
	return
}

func BindAutoSubContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 109) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindAutoSubContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 109) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindAutoSubContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindAutoSubContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindAutoSubContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 109, a)
}

func BindAutoSubContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 109, a)
}

func BindAutoSubContext_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 109)
}

func BindAutoSubPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 110, a)
}

func BindAutoSubPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 110, a)
}

func BindAutoSubPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = BindAutoSubPassword_Lookup(p)
	return
}

func BindAutoSubPassword_GetString(p *radius.Packet) (value string) {
	value, _ = BindAutoSubPassword_LookupString(p)
	return
}

func BindAutoSubPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 110) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindAutoSubPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 110) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BindAutoSubPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BindAutoSubPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BindAutoSubPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 110, a)
}

func BindAutoSubPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 110, a)
}

func BindAutoSubPassword_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 110)
}

type CircuitProtocolEncap uint32

const (
	CircuitProtocolEncap_Value_ENCAPSPPPOE CircuitProtocolEncap = 27
)

var CircuitProtocolEncap_Strings = map[CircuitProtocolEncap]string{
	CircuitProtocolEncap_Value_ENCAPSPPPOE: "ENCAPS-PPPOE",
}

func (a CircuitProtocolEncap) String() string {
	if str, ok := CircuitProtocolEncap_Strings[a]; ok {
		return str
	}
	return "CircuitProtocolEncap(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CircuitProtocolEncap_Add(p *radius.Packet, value CircuitProtocolEncap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 111, a)
}

func CircuitProtocolEncap_Get(p *radius.Packet) (value CircuitProtocolEncap) {
	value, _ = CircuitProtocolEncap_Lookup(p)
	return
}

func CircuitProtocolEncap_Gets(p *radius.Packet) (values []CircuitProtocolEncap, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 111) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CircuitProtocolEncap(i))
	}
	return
}

func CircuitProtocolEncap_Lookup(p *radius.Packet) (value CircuitProtocolEncap, err error) {
	a, ok := _Redback_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CircuitProtocolEncap(i)
	return
}

func CircuitProtocolEncap_Set(p *radius.Packet, value CircuitProtocolEncap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 111, a)
}

func CircuitProtocolEncap_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 111)
}

func OSVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 112, a)
}

func OSVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 112, a)
}

func OSVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = OSVersion_Lookup(p)
	return
}

func OSVersion_GetString(p *radius.Packet) (value string) {
	value, _ = OSVersion_LookupString(p)
	return
}

func OSVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 112) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func OSVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 112) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func OSVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func OSVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func OSVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 112, a)
}

func OSVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 112, a)
}

func OSVersion_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 112)
}

func SessionTrafficLimit_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 113, a)
}

func SessionTrafficLimit_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 113, a)
}

func SessionTrafficLimit_Get(p *radius.Packet) (value []byte) {
	value, _ = SessionTrafficLimit_Lookup(p)
	return
}

func SessionTrafficLimit_GetString(p *radius.Packet) (value string) {
	value, _ = SessionTrafficLimit_LookupString(p)
	return
}

func SessionTrafficLimit_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 113) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SessionTrafficLimit_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 113) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SessionTrafficLimit_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SessionTrafficLimit_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SessionTrafficLimit_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 113, a)
}

func SessionTrafficLimit_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 113, a)
}

func SessionTrafficLimit_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 113)
}

func QOSReference_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 114, a)
}

func QOSReference_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 114, a)
}

func QOSReference_Get(p *radius.Packet) (value []byte) {
	value, _ = QOSReference_Lookup(p)
	return
}

func QOSReference_GetString(p *radius.Packet) (value string) {
	value, _ = QOSReference_LookupString(p)
	return
}

func QOSReference_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 114) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QOSReference_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 114) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QOSReference_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QOSReference_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QOSReference_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 114, a)
}

func QOSReference_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 114, a)
}

func QOSReference_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 114)
}

func RateLimitExcessBurst_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 121, a)
}

func RateLimitExcessBurst_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 121, a)
}

func RateLimitExcessBurst_Get(p *radius.Packet) (value []byte) {
	value, _ = RateLimitExcessBurst_Lookup(p)
	return
}

func RateLimitExcessBurst_GetString(p *radius.Packet) (value string) {
	value, _ = RateLimitExcessBurst_LookupString(p)
	return
}

func RateLimitExcessBurst_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 121) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RateLimitExcessBurst_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 121) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RateLimitExcessBurst_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RateLimitExcessBurst_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RateLimitExcessBurst_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 121, a)
}

func RateLimitExcessBurst_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 121, a)
}

func RateLimitExcessBurst_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 121)
}

func PoliceExcessBurst_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 122, a)
}

func PoliceExcessBurst_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 122, a)
}

func PoliceExcessBurst_Get(p *radius.Packet) (value []byte) {
	value, _ = PoliceExcessBurst_Lookup(p)
	return
}

func PoliceExcessBurst_GetString(p *radius.Packet) (value string) {
	value, _ = PoliceExcessBurst_LookupString(p)
	return
}

func PoliceExcessBurst_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 122) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PoliceExcessBurst_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 122) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PoliceExcessBurst_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PoliceExcessBurst_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PoliceExcessBurst_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 122, a)
}

func PoliceExcessBurst_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 122, a)
}

func PoliceExcessBurst_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 122)
}

func TunnelRateLimitExcessBurst_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 123, a)
}

func TunnelRateLimitExcessBurst_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 123, a)
}

func TunnelRateLimitExcessBurst_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelRateLimitExcessBurst_Lookup(p)
	return
}

func TunnelRateLimitExcessBurst_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelRateLimitExcessBurst_LookupString(p)
	return
}

func TunnelRateLimitExcessBurst_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 123) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelRateLimitExcessBurst_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 123) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelRateLimitExcessBurst_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelRateLimitExcessBurst_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelRateLimitExcessBurst_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 123, a)
}

func TunnelRateLimitExcessBurst_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 123, a)
}

func TunnelRateLimitExcessBurst_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 123)
}

func TunnelPoliceExcessBurst_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 124, a)
}

func TunnelPoliceExcessBurst_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 124, a)
}

func TunnelPoliceExcessBurst_Get(p *radius.Packet) (value []byte) {
	value, _ = TunnelPoliceExcessBurst_Lookup(p)
	return
}

func TunnelPoliceExcessBurst_GetString(p *radius.Packet) (value string) {
	value, _ = TunnelPoliceExcessBurst_LookupString(p)
	return
}

func TunnelPoliceExcessBurst_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 124) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelPoliceExcessBurst_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 124) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TunnelPoliceExcessBurst_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TunnelPoliceExcessBurst_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TunnelPoliceExcessBurst_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 124, a)
}

func TunnelPoliceExcessBurst_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 124, a)
}

func TunnelPoliceExcessBurst_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 124)
}

func DHCPVendorClassID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 125, a)
}

func DHCPVendorClassID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 125, a)
}

func DHCPVendorClassID_Get(p *radius.Packet) (value []byte) {
	value, _ = DHCPVendorClassID_Lookup(p)
	return
}

func DHCPVendorClassID_GetString(p *radius.Packet) (value string) {
	value, _ = DHCPVendorClassID_LookupString(p)
	return
}

func DHCPVendorClassID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 125) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DHCPVendorClassID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 125) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DHCPVendorClassID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DHCPVendorClassID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DHCPVendorClassID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 125, a)
}

func DHCPVendorClassID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 125, a)
}

func DHCPVendorClassID_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 125)
}

func QosRate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 126, a)
}

func QosRate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 126, a)
}

func QosRate_Get(p *radius.Packet) (value []byte) {
	value, _ = QosRate_Lookup(p)
	return
}

func QosRate_GetString(p *radius.Packet) (value string) {
	value, _ = QosRate_LookupString(p)
	return
}

func QosRate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 126) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QosRate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 126) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QosRate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QosRate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QosRate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 126, a)
}

func QosRate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 126, a)
}

func QosRate_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 126)
}

func DHCPVendorEncapOption_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 127, a)
}

func DHCPVendorEncapOption_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 127, a)
}

func DHCPVendorEncapOption_Get(p *radius.Packet) (value []byte) {
	value, _ = DHCPVendorEncapOption_Lookup(p)
	return
}

func DHCPVendorEncapOption_GetString(p *radius.Packet) (value string) {
	value, _ = DHCPVendorEncapOption_LookupString(p)
	return
}

func DHCPVendorEncapOption_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 127) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DHCPVendorEncapOption_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 127) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DHCPVendorEncapOption_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DHCPVendorEncapOption_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DHCPVendorEncapOption_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 127, a)
}

func DHCPVendorEncapOption_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 127, a)
}

func DHCPVendorEncapOption_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 127)
}

type AcctInputOctets64 uint64

var AcctInputOctets64_Strings = map[AcctInputOctets64]string{}

func (a AcctInputOctets64) String() string {
	if str, ok := AcctInputOctets64_Strings[a]; ok {
		return str
	}
	return "AcctInputOctets64(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctInputOctets64_Add(p *radius.Packet, value AcctInputOctets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_AddVendor(p, 128, a)
}

func AcctInputOctets64_Get(p *radius.Packet) (value AcctInputOctets64) {
	value, _ = AcctInputOctets64_Lookup(p)
	return
}

func AcctInputOctets64_Gets(p *radius.Packet) (values []AcctInputOctets64, err error) {
	var i uint64
	for _, attr := range _Redback_GetsVendor(p, 128) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, AcctInputOctets64(i))
	}
	return
}

func AcctInputOctets64_Lookup(p *radius.Packet) (value AcctInputOctets64, err error) {
	a, ok := _Redback_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = AcctInputOctets64(i)
	return
}

func AcctInputOctets64_Set(p *radius.Packet, value AcctInputOctets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_SetVendor(p, 128, a)
}

func AcctInputOctets64_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 128)
}

type AcctOutputOctets64 uint64

var AcctOutputOctets64_Strings = map[AcctOutputOctets64]string{}

func (a AcctOutputOctets64) String() string {
	if str, ok := AcctOutputOctets64_Strings[a]; ok {
		return str
	}
	return "AcctOutputOctets64(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctOutputOctets64_Add(p *radius.Packet, value AcctOutputOctets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_AddVendor(p, 129, a)
}

func AcctOutputOctets64_Get(p *radius.Packet) (value AcctOutputOctets64) {
	value, _ = AcctOutputOctets64_Lookup(p)
	return
}

func AcctOutputOctets64_Gets(p *radius.Packet) (values []AcctOutputOctets64, err error) {
	var i uint64
	for _, attr := range _Redback_GetsVendor(p, 129) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, AcctOutputOctets64(i))
	}
	return
}

func AcctOutputOctets64_Lookup(p *radius.Packet) (value AcctOutputOctets64, err error) {
	a, ok := _Redback_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = AcctOutputOctets64(i)
	return
}

func AcctOutputOctets64_Set(p *radius.Packet, value AcctOutputOctets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_SetVendor(p, 129, a)
}

func AcctOutputOctets64_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 129)
}

type AcctInputPackets64 uint64

var AcctInputPackets64_Strings = map[AcctInputPackets64]string{}

func (a AcctInputPackets64) String() string {
	if str, ok := AcctInputPackets64_Strings[a]; ok {
		return str
	}
	return "AcctInputPackets64(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctInputPackets64_Add(p *radius.Packet, value AcctInputPackets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_AddVendor(p, 130, a)
}

func AcctInputPackets64_Get(p *radius.Packet) (value AcctInputPackets64) {
	value, _ = AcctInputPackets64_Lookup(p)
	return
}

func AcctInputPackets64_Gets(p *radius.Packet) (values []AcctInputPackets64, err error) {
	var i uint64
	for _, attr := range _Redback_GetsVendor(p, 130) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, AcctInputPackets64(i))
	}
	return
}

func AcctInputPackets64_Lookup(p *radius.Packet) (value AcctInputPackets64, err error) {
	a, ok := _Redback_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = AcctInputPackets64(i)
	return
}

func AcctInputPackets64_Set(p *radius.Packet, value AcctInputPackets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_SetVendor(p, 130, a)
}

func AcctInputPackets64_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 130)
}

type AcctOutputPackets64 uint64

var AcctOutputPackets64_Strings = map[AcctOutputPackets64]string{}

func (a AcctOutputPackets64) String() string {
	if str, ok := AcctOutputPackets64_Strings[a]; ok {
		return str
	}
	return "AcctOutputPackets64(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctOutputPackets64_Add(p *radius.Packet, value AcctOutputPackets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_AddVendor(p, 131, a)
}

func AcctOutputPackets64_Get(p *radius.Packet) (value AcctOutputPackets64) {
	value, _ = AcctOutputPackets64_Lookup(p)
	return
}

func AcctOutputPackets64_Gets(p *radius.Packet) (values []AcctOutputPackets64, err error) {
	var i uint64
	for _, attr := range _Redback_GetsVendor(p, 131) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, AcctOutputPackets64(i))
	}
	return
}

func AcctOutputPackets64_Lookup(p *radius.Packet) (value AcctOutputPackets64, err error) {
	a, ok := _Redback_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = AcctOutputPackets64(i)
	return
}

func AcctOutputPackets64_Set(p *radius.Packet, value AcctOutputPackets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_SetVendor(p, 131, a)
}

func AcctOutputPackets64_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 131)
}

func AssignedIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 132, a)
}

func AssignedIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = AssignedIPAddress_Lookup(p)
	return
}

func AssignedIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Redback_GetsVendor(p, 132) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AssignedIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Redback_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AssignedIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 132, a)
}

func AssignedIPAddress_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 132)
}

type AcctMcastInOctets64 uint64

var AcctMcastInOctets64_Strings = map[AcctMcastInOctets64]string{}

func (a AcctMcastInOctets64) String() string {
	if str, ok := AcctMcastInOctets64_Strings[a]; ok {
		return str
	}
	return "AcctMcastInOctets64(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctMcastInOctets64_Add(p *radius.Packet, value AcctMcastInOctets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_AddVendor(p, 133, a)
}

func AcctMcastInOctets64_Get(p *radius.Packet) (value AcctMcastInOctets64) {
	value, _ = AcctMcastInOctets64_Lookup(p)
	return
}

func AcctMcastInOctets64_Gets(p *radius.Packet) (values []AcctMcastInOctets64, err error) {
	var i uint64
	for _, attr := range _Redback_GetsVendor(p, 133) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, AcctMcastInOctets64(i))
	}
	return
}

func AcctMcastInOctets64_Lookup(p *radius.Packet) (value AcctMcastInOctets64, err error) {
	a, ok := _Redback_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = AcctMcastInOctets64(i)
	return
}

func AcctMcastInOctets64_Set(p *radius.Packet, value AcctMcastInOctets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_SetVendor(p, 133, a)
}

func AcctMcastInOctets64_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 133)
}

type AcctMcastOutOctets64 uint64

var AcctMcastOutOctets64_Strings = map[AcctMcastOutOctets64]string{}

func (a AcctMcastOutOctets64) String() string {
	if str, ok := AcctMcastOutOctets64_Strings[a]; ok {
		return str
	}
	return "AcctMcastOutOctets64(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctMcastOutOctets64_Add(p *radius.Packet, value AcctMcastOutOctets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_AddVendor(p, 134, a)
}

func AcctMcastOutOctets64_Get(p *radius.Packet) (value AcctMcastOutOctets64) {
	value, _ = AcctMcastOutOctets64_Lookup(p)
	return
}

func AcctMcastOutOctets64_Gets(p *radius.Packet) (values []AcctMcastOutOctets64, err error) {
	var i uint64
	for _, attr := range _Redback_GetsVendor(p, 134) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, AcctMcastOutOctets64(i))
	}
	return
}

func AcctMcastOutOctets64_Lookup(p *radius.Packet) (value AcctMcastOutOctets64, err error) {
	a, ok := _Redback_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = AcctMcastOutOctets64(i)
	return
}

func AcctMcastOutOctets64_Set(p *radius.Packet, value AcctMcastOutOctets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_SetVendor(p, 134, a)
}

func AcctMcastOutOctets64_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 134)
}

type AcctMcastInPackets64 uint64

var AcctMcastInPackets64_Strings = map[AcctMcastInPackets64]string{}

func (a AcctMcastInPackets64) String() string {
	if str, ok := AcctMcastInPackets64_Strings[a]; ok {
		return str
	}
	return "AcctMcastInPackets64(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctMcastInPackets64_Add(p *radius.Packet, value AcctMcastInPackets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_AddVendor(p, 135, a)
}

func AcctMcastInPackets64_Get(p *radius.Packet) (value AcctMcastInPackets64) {
	value, _ = AcctMcastInPackets64_Lookup(p)
	return
}

func AcctMcastInPackets64_Gets(p *radius.Packet) (values []AcctMcastInPackets64, err error) {
	var i uint64
	for _, attr := range _Redback_GetsVendor(p, 135) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, AcctMcastInPackets64(i))
	}
	return
}

func AcctMcastInPackets64_Lookup(p *radius.Packet) (value AcctMcastInPackets64, err error) {
	a, ok := _Redback_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = AcctMcastInPackets64(i)
	return
}

func AcctMcastInPackets64_Set(p *radius.Packet, value AcctMcastInPackets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_SetVendor(p, 135, a)
}

func AcctMcastInPackets64_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 135)
}

type AcctMcastOutPackets64 uint64

var AcctMcastOutPackets64_Strings = map[AcctMcastOutPackets64]string{}

func (a AcctMcastOutPackets64) String() string {
	if str, ok := AcctMcastOutPackets64_Strings[a]; ok {
		return str
	}
	return "AcctMcastOutPackets64(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctMcastOutPackets64_Add(p *radius.Packet, value AcctMcastOutPackets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_AddVendor(p, 136, a)
}

func AcctMcastOutPackets64_Get(p *radius.Packet) (value AcctMcastOutPackets64) {
	value, _ = AcctMcastOutPackets64_Lookup(p)
	return
}

func AcctMcastOutPackets64_Gets(p *radius.Packet) (values []AcctMcastOutPackets64, err error) {
	var i uint64
	for _, attr := range _Redback_GetsVendor(p, 136) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, AcctMcastOutPackets64(i))
	}
	return
}

func AcctMcastOutPackets64_Lookup(p *radius.Packet) (value AcctMcastOutPackets64, err error) {
	a, ok := _Redback_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = AcctMcastOutPackets64(i)
	return
}

func AcctMcastOutPackets64_Set(p *radius.Packet, value AcctMcastOutPackets64) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Redback_SetVendor(p, 136, a)
}

func AcctMcastOutPackets64_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 136)
}

type LACPort uint32

var LACPort_Strings = map[LACPort]string{}

func (a LACPort) String() string {
	if str, ok := LACPort_Strings[a]; ok {
		return str
	}
	return "LACPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LACPort_Add(p *radius.Packet, value LACPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 137, a)
}

func LACPort_Get(p *radius.Packet) (value LACPort) {
	value, _ = LACPort_Lookup(p)
	return
}

func LACPort_Gets(p *radius.Packet) (values []LACPort, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 137) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LACPort(i))
	}
	return
}

func LACPort_Lookup(p *radius.Packet) (value LACPort, err error) {
	a, ok := _Redback_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LACPort(i)
	return
}

func LACPort_Set(p *radius.Packet, value LACPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 137, a)
}

func LACPort_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 137)
}

type LACRealPort uint32

var LACRealPort_Strings = map[LACRealPort]string{}

func (a LACRealPort) String() string {
	if str, ok := LACRealPort_Strings[a]; ok {
		return str
	}
	return "LACRealPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LACRealPort_Add(p *radius.Packet, value LACRealPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 138, a)
}

func LACRealPort_Get(p *radius.Packet) (value LACRealPort) {
	value, _ = LACRealPort_Lookup(p)
	return
}

func LACRealPort_Gets(p *radius.Packet) (values []LACRealPort, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 138) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LACRealPort(i))
	}
	return
}

func LACRealPort_Lookup(p *radius.Packet) (value LACRealPort, err error) {
	a, ok := _Redback_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LACRealPort(i)
	return
}

func LACRealPort_Set(p *radius.Packet, value LACRealPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 138, a)
}

func LACRealPort_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 138)
}

type LACPortType uint32

const (
	LACPortType_Value_NASPORTTYPE10BT    LACPortType = 40
	LACPortType_Value_NASPORTTYPE100BT   LACPortType = 41
	LACPortType_Value_NASPORTTYPEDS3FR   LACPortType = 42
	LACPortType_Value_NASPORTTYPEDS3ATM  LACPortType = 43
	LACPortType_Value_NASPORTTYPEOC3     LACPortType = 44
	LACPortType_Value_NASPORTTYPEHSSI    LACPortType = 45
	LACPortType_Value_NASPORTTYPEEIA530  LACPortType = 46
	LACPortType_Value_NASPORTTYPET1      LACPortType = 47
	LACPortType_Value_NASPORTTYPECHANT3  LACPortType = 48
	LACPortType_Value_NASPORTTYPEDS1FR   LACPortType = 49
	LACPortType_Value_NASPORTTYPEE3ATM   LACPortType = 50
	LACPortType_Value_NASPORTTYPEIMAATM  LACPortType = 51
	LACPortType_Value_NASPORTTYPEDS3ATM2 LACPortType = 52
	LACPortType_Value_NASPORTTYPEOC3ATM2 LACPortType = 53
	LACPortType_Value_NASPORTTYPE1000BSX LACPortType = 54
	LACPortType_Value_NASPORTTYPEE1FR    LACPortType = 55
	LACPortType_Value_NASPORTTYPEE1ATM   LACPortType = 56
	LACPortType_Value_NASPORTTYPEE3FR    LACPortType = 57
	LACPortType_Value_NASPORTTYPEOC3POS  LACPortType = 58
	LACPortType_Value_NASPORTTYPEOC12POS LACPortType = 59
	LACPortType_Value_NASPORTTYPEPPPOE   LACPortType = 60
)

var LACPortType_Strings = map[LACPortType]string{
	LACPortType_Value_NASPORTTYPE10BT:    "NAS-PORT-TYPE-10BT",
	LACPortType_Value_NASPORTTYPE100BT:   "NAS-PORT-TYPE-100BT",
	LACPortType_Value_NASPORTTYPEDS3FR:   "NAS-PORT-TYPE-DS3-FR",
	LACPortType_Value_NASPORTTYPEDS3ATM:  "NAS-PORT-TYPE-DS3-ATM",
	LACPortType_Value_NASPORTTYPEOC3:     "NAS-PORT-TYPE-OC3",
	LACPortType_Value_NASPORTTYPEHSSI:    "NAS-PORT-TYPE-HSSI",
	LACPortType_Value_NASPORTTYPEEIA530:  "NAS-PORT-TYPE-EIA530",
	LACPortType_Value_NASPORTTYPET1:      "NAS-PORT-TYPE-T1",
	LACPortType_Value_NASPORTTYPECHANT3:  "NAS-PORT-TYPE-CHAN-T3",
	LACPortType_Value_NASPORTTYPEDS1FR:   "NAS-PORT-TYPE-DS1-FR",
	LACPortType_Value_NASPORTTYPEE3ATM:   "NAS-PORT-TYPE-E3-ATM",
	LACPortType_Value_NASPORTTYPEIMAATM:  "NAS-PORT-TYPE-IMA-ATM",
	LACPortType_Value_NASPORTTYPEDS3ATM2: "NAS-PORT-TYPE-DS3-ATM-2",
	LACPortType_Value_NASPORTTYPEOC3ATM2: "NAS-PORT-TYPE-OC3-ATM-2",
	LACPortType_Value_NASPORTTYPE1000BSX: "NAS-PORT-TYPE-1000BSX",
	LACPortType_Value_NASPORTTYPEE1FR:    "NAS-PORT-TYPE-E1-FR",
	LACPortType_Value_NASPORTTYPEE1ATM:   "NAS-PORT-TYPE-E1-ATM",
	LACPortType_Value_NASPORTTYPEE3FR:    "NAS-PORT-TYPE-E3-FR",
	LACPortType_Value_NASPORTTYPEOC3POS:  "NAS-PORT-TYPE-OC3-POS",
	LACPortType_Value_NASPORTTYPEOC12POS: "NAS-PORT-TYPE-OC12-POS",
	LACPortType_Value_NASPORTTYPEPPPOE:   "NAS-PORT-TYPE-PPPOE",
}

func (a LACPortType) String() string {
	if str, ok := LACPortType_Strings[a]; ok {
		return str
	}
	return "LACPortType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LACPortType_Add(p *radius.Packet, value LACPortType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 139, a)
}

func LACPortType_Get(p *radius.Packet) (value LACPortType) {
	value, _ = LACPortType_Lookup(p)
	return
}

func LACPortType_Gets(p *radius.Packet) (values []LACPortType, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 139) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LACPortType(i))
	}
	return
}

func LACPortType_Lookup(p *radius.Packet) (value LACPortType, err error) {
	a, ok := _Redback_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LACPortType(i)
	return
}

func LACPortType_Set(p *radius.Packet, value LACPortType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 139, a)
}

func LACPortType_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 139)
}

type LACRealPortType uint32

const (
	LACRealPortType_Value_NASPORTTYPE10BT    LACRealPortType = 40
	LACRealPortType_Value_NASPORTTYPE100BT   LACRealPortType = 41
	LACRealPortType_Value_NASPORTTYPEDS3FR   LACRealPortType = 42
	LACRealPortType_Value_NASPORTTYPEDS3ATM  LACRealPortType = 43
	LACRealPortType_Value_NASPORTTYPEOC3     LACRealPortType = 44
	LACRealPortType_Value_NASPORTTYPEHSSI    LACRealPortType = 45
	LACRealPortType_Value_NASPORTTYPEEIA530  LACRealPortType = 46
	LACRealPortType_Value_NASPORTTYPET1      LACRealPortType = 47
	LACRealPortType_Value_NASPORTTYPECHANT3  LACRealPortType = 48
	LACRealPortType_Value_NASPORTTYPEDS1FR   LACRealPortType = 49
	LACRealPortType_Value_NASPORTTYPEE3ATM   LACRealPortType = 50
	LACRealPortType_Value_NASPORTTYPEIMAATM  LACRealPortType = 51
	LACRealPortType_Value_NASPORTTYPEDS3ATM2 LACRealPortType = 52
	LACRealPortType_Value_NASPORTTYPEOC3ATM2 LACRealPortType = 53
	LACRealPortType_Value_NASPORTTYPE1000BSX LACRealPortType = 54
	LACRealPortType_Value_NASPORTTYPEE1FR    LACRealPortType = 55
	LACRealPortType_Value_NASPORTTYPEE1ATM   LACRealPortType = 56
	LACRealPortType_Value_NASPORTTYPEE3FR    LACRealPortType = 57
	LACRealPortType_Value_NASPORTTYPEOC3POS  LACRealPortType = 58
	LACRealPortType_Value_NASPORTTYPEOC12POS LACRealPortType = 59
	LACRealPortType_Value_NASPORTTYPEPPPOE   LACRealPortType = 60
)

var LACRealPortType_Strings = map[LACRealPortType]string{
	LACRealPortType_Value_NASPORTTYPE10BT:    "NAS-PORT-TYPE-10BT",
	LACRealPortType_Value_NASPORTTYPE100BT:   "NAS-PORT-TYPE-100BT",
	LACRealPortType_Value_NASPORTTYPEDS3FR:   "NAS-PORT-TYPE-DS3-FR",
	LACRealPortType_Value_NASPORTTYPEDS3ATM:  "NAS-PORT-TYPE-DS3-ATM",
	LACRealPortType_Value_NASPORTTYPEOC3:     "NAS-PORT-TYPE-OC3",
	LACRealPortType_Value_NASPORTTYPEHSSI:    "NAS-PORT-TYPE-HSSI",
	LACRealPortType_Value_NASPORTTYPEEIA530:  "NAS-PORT-TYPE-EIA530",
	LACRealPortType_Value_NASPORTTYPET1:      "NAS-PORT-TYPE-T1",
	LACRealPortType_Value_NASPORTTYPECHANT3:  "NAS-PORT-TYPE-CHAN-T3",
	LACRealPortType_Value_NASPORTTYPEDS1FR:   "NAS-PORT-TYPE-DS1-FR",
	LACRealPortType_Value_NASPORTTYPEE3ATM:   "NAS-PORT-TYPE-E3-ATM",
	LACRealPortType_Value_NASPORTTYPEIMAATM:  "NAS-PORT-TYPE-IMA-ATM",
	LACRealPortType_Value_NASPORTTYPEDS3ATM2: "NAS-PORT-TYPE-DS3-ATM-2",
	LACRealPortType_Value_NASPORTTYPEOC3ATM2: "NAS-PORT-TYPE-OC3-ATM-2",
	LACRealPortType_Value_NASPORTTYPE1000BSX: "NAS-PORT-TYPE-1000BSX",
	LACRealPortType_Value_NASPORTTYPEE1FR:    "NAS-PORT-TYPE-E1-FR",
	LACRealPortType_Value_NASPORTTYPEE1ATM:   "NAS-PORT-TYPE-E1-ATM",
	LACRealPortType_Value_NASPORTTYPEE3FR:    "NAS-PORT-TYPE-E3-FR",
	LACRealPortType_Value_NASPORTTYPEOC3POS:  "NAS-PORT-TYPE-OC3-POS",
	LACRealPortType_Value_NASPORTTYPEOC12POS: "NAS-PORT-TYPE-OC12-POS",
	LACRealPortType_Value_NASPORTTYPEPPPOE:   "NAS-PORT-TYPE-PPPOE",
}

func (a LACRealPortType) String() string {
	if str, ok := LACRealPortType_Strings[a]; ok {
		return str
	}
	return "LACRealPortType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LACRealPortType_Add(p *radius.Packet, value LACRealPortType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 140, a)
}

func LACRealPortType_Get(p *radius.Packet) (value LACRealPortType) {
	value, _ = LACRealPortType_Lookup(p)
	return
}

func LACRealPortType_Gets(p *radius.Packet) (values []LACRealPortType, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 140) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LACRealPortType(i))
	}
	return
}

func LACRealPortType_Lookup(p *radius.Packet) (value LACRealPortType, err error) {
	a, ok := _Redback_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LACRealPortType(i)
	return
}

func LACRealPortType_Set(p *radius.Packet, value LACRealPortType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 140, a)
}

func LACRealPortType_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 140)
}

func AcctDynAcEnt_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 141, a)
}

func AcctDynAcEnt_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 141, a)
}

func AcctDynAcEnt_Get(p *radius.Packet) (value []byte) {
	value, _ = AcctDynAcEnt_Lookup(p)
	return
}

func AcctDynAcEnt_GetString(p *radius.Packet) (value string) {
	value, _ = AcctDynAcEnt_LookupString(p)
	return
}

func AcctDynAcEnt_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 141) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcctDynAcEnt_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 141) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcctDynAcEnt_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcctDynAcEnt_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcctDynAcEnt_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 141, a)
}

func AcctDynAcEnt_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 141, a)
}

func AcctDynAcEnt_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 141)
}

type SessionErrorCode uint32

var SessionErrorCode_Strings = map[SessionErrorCode]string{}

func (a SessionErrorCode) String() string {
	if str, ok := SessionErrorCode_Strings[a]; ok {
		return str
	}
	return "SessionErrorCode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SessionErrorCode_Add(p *radius.Packet, value SessionErrorCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 142, a)
}

func SessionErrorCode_Get(p *radius.Packet) (value SessionErrorCode) {
	value, _ = SessionErrorCode_Lookup(p)
	return
}

func SessionErrorCode_Gets(p *radius.Packet) (values []SessionErrorCode, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 142) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SessionErrorCode(i))
	}
	return
}

func SessionErrorCode_Lookup(p *radius.Packet) (value SessionErrorCode, err error) {
	a, ok := _Redback_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SessionErrorCode(i)
	return
}

func SessionErrorCode_Set(p *radius.Packet, value SessionErrorCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 142, a)
}

func SessionErrorCode_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 142)
}

func SessionErrorMsg_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 143, a)
}

func SessionErrorMsg_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 143, a)
}

func SessionErrorMsg_Get(p *radius.Packet) (value []byte) {
	value, _ = SessionErrorMsg_Lookup(p)
	return
}

func SessionErrorMsg_GetString(p *radius.Packet) (value string) {
	value, _ = SessionErrorMsg_LookupString(p)
	return
}

func SessionErrorMsg_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 143) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SessionErrorMsg_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 143) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SessionErrorMsg_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SessionErrorMsg_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SessionErrorMsg_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 143, a)
}

func SessionErrorMsg_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 143, a)
}

func SessionErrorMsg_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 143)
}

type AcctUpdateReason uint32

const (
	AcctUpdateReason_Value_AAALOADACCTSESSIONUP          AcctUpdateReason = 1
	AcctUpdateReason_Value_AAALOADACCTSESSIONDOWN        AcctUpdateReason = 2
	AcctUpdateReason_Value_AAALOADACCTPERIODIC           AcctUpdateReason = 3
	AcctUpdateReason_Value_AAALOADACCTDYNACENTSTART      AcctUpdateReason = 4
	AcctUpdateReason_Value_AAALOADACCTDYNACENTSTOP       AcctUpdateReason = 5
	AcctUpdateReason_Value_AAALOADACCTDYNACENTTIMEOUT    AcctUpdateReason = 6
	AcctUpdateReason_Value_AAALOADACCTSUBSCRIBERREAUTHOR AcctUpdateReason = 7
	AcctUpdateReason_Value_AAALOADACCTPPPIPCPUP          AcctUpdateReason = 8
	AcctUpdateReason_Value_AAALOADACCTPPPMPLINKUP        AcctUpdateReason = 9
	AcctUpdateReason_Value_AAALOADACCTDHCPIPADDRGRANTED  AcctUpdateReason = 10
	AcctUpdateReason_Value_AAALOADACCTDHCPIPADDRRELEASED AcctUpdateReason = 11
	AcctUpdateReason_Value_AAALOADACCTACLTIMEREDACTION   AcctUpdateReason = 12
	AcctUpdateReason_Value_AAALOADACCTACLACTION          AcctUpdateReason = 13
	AcctUpdateReason_Value_AAALOADACCTCMD                AcctUpdateReason = 14
	AcctUpdateReason_Value_AAALOADACCTTEST               AcctUpdateReason = 15
)

var AcctUpdateReason_Strings = map[AcctUpdateReason]string{
	AcctUpdateReason_Value_AAALOADACCTSESSIONUP:          "AAA_LOAD_ACCT_SESSION_UP",
	AcctUpdateReason_Value_AAALOADACCTSESSIONDOWN:        "AAA_LOAD_ACCT_SESSION_DOWN",
	AcctUpdateReason_Value_AAALOADACCTPERIODIC:           "AAA_LOAD_ACCT_PERIODIC",
	AcctUpdateReason_Value_AAALOADACCTDYNACENTSTART:      "AAA_LOAD_ACCT_DYN_AC_ENT_START",
	AcctUpdateReason_Value_AAALOADACCTDYNACENTSTOP:       "AAA_LOAD_ACCT_DYN_AC_ENT_STOP",
	AcctUpdateReason_Value_AAALOADACCTDYNACENTTIMEOUT:    "AAA_LOAD_ACCT_DYN_AC_ENT_TIMEOUT",
	AcctUpdateReason_Value_AAALOADACCTSUBSCRIBERREAUTHOR: "AAA_LOAD_ACCT_SUBSCRIBER_REAUTHOR",
	AcctUpdateReason_Value_AAALOADACCTPPPIPCPUP:          "AAA_LOAD_ACCT_PPP_IPCP_UP",
	AcctUpdateReason_Value_AAALOADACCTPPPMPLINKUP:        "AAA_LOAD_ACCT_PPP_MP_LINK_UP",
	AcctUpdateReason_Value_AAALOADACCTDHCPIPADDRGRANTED:  "AAA_LOAD_ACCT_DHCP_IP_ADDR_GRANTED",
	AcctUpdateReason_Value_AAALOADACCTDHCPIPADDRRELEASED: "AAA_LOAD_ACCT_DHCP_IP_ADDR_RELEASED",
	AcctUpdateReason_Value_AAALOADACCTACLTIMEREDACTION:   "AAA_LOAD_ACCT_ACL_TIMERED_ACTION",
	AcctUpdateReason_Value_AAALOADACCTACLACTION:          "AAA_LOAD_ACCT_ACL_ACTION",
	AcctUpdateReason_Value_AAALOADACCTCMD:                "AAA_LOAD_ACCT_CMD",
	AcctUpdateReason_Value_AAALOADACCTTEST:               "AAA_LOAD_ACCT_TEST",
}

func (a AcctUpdateReason) String() string {
	if str, ok := AcctUpdateReason_Strings[a]; ok {
		return str
	}
	return "AcctUpdateReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctUpdateReason_Add(p *radius.Packet, value AcctUpdateReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 144, a)
}

func AcctUpdateReason_Get(p *radius.Packet) (value AcctUpdateReason) {
	value, _ = AcctUpdateReason_Lookup(p)
	return
}

func AcctUpdateReason_Gets(p *radius.Packet) (values []AcctUpdateReason, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 144) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcctUpdateReason(i))
	}
	return
}

func AcctUpdateReason_Lookup(p *radius.Packet) (value AcctUpdateReason, err error) {
	a, ok := _Redback_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcctUpdateReason(i)
	return
}

func AcctUpdateReason_Set(p *radius.Packet, value AcctUpdateReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 144, a)
}

func AcctUpdateReason_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 144)
}

func MacAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 145, a)
}

func MacAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 145, a)
}

func MacAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = MacAddr_Lookup(p)
	return
}

func MacAddr_GetString(p *radius.Packet) (value string) {
	value, _ = MacAddr_LookupString(p)
	return
}

func MacAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 145) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MacAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 145) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MacAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MacAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MacAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 145, a)
}

func MacAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 145, a)
}

func MacAddr_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 145)
}

func VlanSourceInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 146, a)
}

func VlanSourceInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 146, a)
}

func VlanSourceInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = VlanSourceInfo_Lookup(p)
	return
}

func VlanSourceInfo_GetString(p *radius.Packet) (value string) {
	value, _ = VlanSourceInfo_LookupString(p)
	return
}

func VlanSourceInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 146) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VlanSourceInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 146) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VlanSourceInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VlanSourceInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VlanSourceInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 146, a)
}

func VlanSourceInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 146, a)
}

func VlanSourceInfo_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 146)
}

type AcctMcastInOctets uint32

var AcctMcastInOctets_Strings = map[AcctMcastInOctets]string{}

func (a AcctMcastInOctets) String() string {
	if str, ok := AcctMcastInOctets_Strings[a]; ok {
		return str
	}
	return "AcctMcastInOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctMcastInOctets_Add(p *radius.Packet, value AcctMcastInOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 147, a)
}

func AcctMcastInOctets_Get(p *radius.Packet) (value AcctMcastInOctets) {
	value, _ = AcctMcastInOctets_Lookup(p)
	return
}

func AcctMcastInOctets_Gets(p *radius.Packet) (values []AcctMcastInOctets, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 147) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcctMcastInOctets(i))
	}
	return
}

func AcctMcastInOctets_Lookup(p *radius.Packet) (value AcctMcastInOctets, err error) {
	a, ok := _Redback_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcctMcastInOctets(i)
	return
}

func AcctMcastInOctets_Set(p *radius.Packet, value AcctMcastInOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 147, a)
}

func AcctMcastInOctets_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 147)
}

type AcctMcastOutOctets uint32

var AcctMcastOutOctets_Strings = map[AcctMcastOutOctets]string{}

func (a AcctMcastOutOctets) String() string {
	if str, ok := AcctMcastOutOctets_Strings[a]; ok {
		return str
	}
	return "AcctMcastOutOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctMcastOutOctets_Add(p *radius.Packet, value AcctMcastOutOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 148, a)
}

func AcctMcastOutOctets_Get(p *radius.Packet) (value AcctMcastOutOctets) {
	value, _ = AcctMcastOutOctets_Lookup(p)
	return
}

func AcctMcastOutOctets_Gets(p *radius.Packet) (values []AcctMcastOutOctets, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 148) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcctMcastOutOctets(i))
	}
	return
}

func AcctMcastOutOctets_Lookup(p *radius.Packet) (value AcctMcastOutOctets, err error) {
	a, ok := _Redback_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcctMcastOutOctets(i)
	return
}

func AcctMcastOutOctets_Set(p *radius.Packet, value AcctMcastOutOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 148, a)
}

func AcctMcastOutOctets_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 148)
}

type AcctMcastInPackets uint32

var AcctMcastInPackets_Strings = map[AcctMcastInPackets]string{}

func (a AcctMcastInPackets) String() string {
	if str, ok := AcctMcastInPackets_Strings[a]; ok {
		return str
	}
	return "AcctMcastInPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctMcastInPackets_Add(p *radius.Packet, value AcctMcastInPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 149, a)
}

func AcctMcastInPackets_Get(p *radius.Packet) (value AcctMcastInPackets) {
	value, _ = AcctMcastInPackets_Lookup(p)
	return
}

func AcctMcastInPackets_Gets(p *radius.Packet) (values []AcctMcastInPackets, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 149) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcctMcastInPackets(i))
	}
	return
}

func AcctMcastInPackets_Lookup(p *radius.Packet) (value AcctMcastInPackets, err error) {
	a, ok := _Redback_LookupVendor(p, 149)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcctMcastInPackets(i)
	return
}

func AcctMcastInPackets_Set(p *radius.Packet, value AcctMcastInPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 149, a)
}

func AcctMcastInPackets_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 149)
}

type AcctMcastOutPackets uint32

var AcctMcastOutPackets_Strings = map[AcctMcastOutPackets]string{}

func (a AcctMcastOutPackets) String() string {
	if str, ok := AcctMcastOutPackets_Strings[a]; ok {
		return str
	}
	return "AcctMcastOutPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctMcastOutPackets_Add(p *radius.Packet, value AcctMcastOutPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 150, a)
}

func AcctMcastOutPackets_Get(p *radius.Packet) (value AcctMcastOutPackets) {
	value, _ = AcctMcastOutPackets_Lookup(p)
	return
}

func AcctMcastOutPackets_Gets(p *radius.Packet) (values []AcctMcastOutPackets, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 150) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcctMcastOutPackets(i))
	}
	return
}

func AcctMcastOutPackets_Lookup(p *radius.Packet) (value AcctMcastOutPackets, err error) {
	a, ok := _Redback_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcctMcastOutPackets(i)
	return
}

func AcctMcastOutPackets_Set(p *radius.Packet, value AcctMcastOutPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 150, a)
}

func AcctMcastOutPackets_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 150)
}

func ReauthSessionID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 151, a)
}

func ReauthSessionID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 151, a)
}

func ReauthSessionID_Get(p *radius.Packet) (value []byte) {
	value, _ = ReauthSessionID_Lookup(p)
	return
}

func ReauthSessionID_GetString(p *radius.Packet) (value string) {
	value, _ = ReauthSessionID_LookupString(p)
	return
}

func ReauthSessionID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 151) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ReauthSessionID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 151) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ReauthSessionID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ReauthSessionID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ReauthSessionID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 151, a)
}

func ReauthSessionID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 151, a)
}

func ReauthSessionID_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 151)
}

func QOSRateInbound_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 156, a)
}

func QOSRateInbound_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 156, a)
}

func QOSRateInbound_Get(p *radius.Packet) (value []byte) {
	value, _ = QOSRateInbound_Lookup(p)
	return
}

func QOSRateInbound_GetString(p *radius.Packet) (value string) {
	value, _ = QOSRateInbound_LookupString(p)
	return
}

func QOSRateInbound_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 156) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QOSRateInbound_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 156) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QOSRateInbound_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 156)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QOSRateInbound_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 156)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QOSRateInbound_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 156, a)
}

func QOSRateInbound_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 156, a)
}

func QOSRateInbound_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 156)
}

func QOSRateOutbound_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 157, a)
}

func QOSRateOutbound_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 157, a)
}

func QOSRateOutbound_Get(p *radius.Packet) (value []byte) {
	value, _ = QOSRateOutbound_Lookup(p)
	return
}

func QOSRateOutbound_GetString(p *radius.Packet) (value string) {
	value, _ = QOSRateOutbound_LookupString(p)
	return
}

func QOSRateOutbound_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 157) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QOSRateOutbound_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 157) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QOSRateOutbound_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QOSRateOutbound_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QOSRateOutbound_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 157, a)
}

func QOSRateOutbound_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 157, a)
}

func QOSRateOutbound_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 157)
}

type RouteTag uint32

var RouteTag_Strings = map[RouteTag]string{}

func (a RouteTag) String() string {
	if str, ok := RouteTag_Strings[a]; ok {
		return str
	}
	return "RouteTag(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RouteTag_Add(p *radius.Packet, value RouteTag) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 158, a)
}

func RouteTag_Get(p *radius.Packet) (value RouteTag) {
	value, _ = RouteTag_Lookup(p)
	return
}

func RouteTag_Gets(p *radius.Packet) (values []RouteTag, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 158) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RouteTag(i))
	}
	return
}

func RouteTag_Lookup(p *radius.Packet) (value RouteTag, err error) {
	a, ok := _Redback_LookupVendor(p, 158)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RouteTag(i)
	return
}

func RouteTag_Set(p *radius.Packet, value RouteTag) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 158, a)
}

func RouteTag_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 158)
}

type LIID uint32

var LIID_Strings = map[LIID]string{}

func (a LIID) String() string {
	if str, ok := LIID_Strings[a]; ok {
		return str
	}
	return "LIID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LIID_Add(p *radius.Packet, value LIID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 159, a)
}

func LIID_Get(p *radius.Packet) (value LIID) {
	value, _ = LIID_Lookup(p)
	return
}

func LIID_Gets(p *radius.Packet) (values []LIID, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 159) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LIID(i))
	}
	return
}

func LIID_Lookup(p *radius.Packet) (value LIID, err error) {
	a, ok := _Redback_LookupVendor(p, 159)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LIID(i)
	return
}

func LIID_Set(p *radius.Packet, value LIID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 159, a)
}

func LIID_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 159)
}

func LIMdAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 160, a)
}

func LIMdAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = LIMdAddress_Lookup(p)
	return
}

func LIMdAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Redback_GetsVendor(p, 160) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LIMdAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Redback_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func LIMdAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 160, a)
}

func LIMdAddress_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 160)
}

type LIMdPort uint32

var LIMdPort_Strings = map[LIMdPort]string{}

func (a LIMdPort) String() string {
	if str, ok := LIMdPort_Strings[a]; ok {
		return str
	}
	return "LIMdPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LIMdPort_Add(p *radius.Packet, value LIMdPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 161, a)
}

func LIMdPort_Get(p *radius.Packet) (value LIMdPort) {
	value, _ = LIMdPort_Lookup(p)
	return
}

func LIMdPort_Gets(p *radius.Packet) (values []LIMdPort, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 161) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LIMdPort(i))
	}
	return
}

func LIMdPort_Lookup(p *radius.Packet) (value LIMdPort, err error) {
	a, ok := _Redback_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LIMdPort(i)
	return
}

func LIMdPort_Set(p *radius.Packet, value LIMdPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 161, a)
}

func LIMdPort_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 161)
}

type LIAction uint32

var LIAction_Strings = map[LIAction]string{}

func (a LIAction) String() string {
	if str, ok := LIAction_Strings[a]; ok {
		return str
	}
	return "LIAction(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LIAction_Add(p *radius.Packet, value LIAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 162, a)
}

func LIAction_Get(p *radius.Packet) (value LIAction) {
	value, _ = LIAction_Lookup(p)
	return
}

func LIAction_Gets(p *radius.Packet) (values []LIAction, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 162) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LIAction(i))
	}
	return
}

func LIAction_Lookup(p *radius.Packet) (value LIAction, err error) {
	a, ok := _Redback_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LIAction(i)
	return
}

func LIAction_Set(p *radius.Packet, value LIAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 162, a)
}

func LIAction_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 162)
}

func LIProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 163, a)
}

func LIProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 163, a)
}

func LIProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = LIProfile_Lookup(p)
	return
}

func LIProfile_GetString(p *radius.Packet) (value string) {
	value, _ = LIProfile_LookupString(p)
	return
}

func LIProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 163) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LIProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 163) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LIProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LIProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LIProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 163, a)
}

func LIProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 163, a)
}

func LIProfile_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 163)
}

func DynamicPolicyFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 164, a)
}

func DynamicPolicyFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 164, a)
}

func DynamicPolicyFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = DynamicPolicyFilter_Lookup(p)
	return
}

func DynamicPolicyFilter_GetString(p *radius.Packet) (value string) {
	value, _ = DynamicPolicyFilter_LookupString(p)
	return
}

func DynamicPolicyFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 164) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DynamicPolicyFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 164) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DynamicPolicyFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DynamicPolicyFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DynamicPolicyFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 164, a)
}

func DynamicPolicyFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 164, a)
}

func DynamicPolicyFilter_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 164)
}

func HTTPRedirectURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 165, a)
}

func HTTPRedirectURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 165, a)
}

func HTTPRedirectURL_Get(p *radius.Packet) (value []byte) {
	value, _ = HTTPRedirectURL_Lookup(p)
	return
}

func HTTPRedirectURL_GetString(p *radius.Packet) (value string) {
	value, _ = HTTPRedirectURL_LookupString(p)
	return
}

func HTTPRedirectURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 165) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HTTPRedirectURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 165) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HTTPRedirectURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 165)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HTTPRedirectURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 165)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HTTPRedirectURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 165, a)
}

func HTTPRedirectURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 165, a)
}

func HTTPRedirectURL_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 165)
}

type DSLActualRateUp uint32

var DSLActualRateUp_Strings = map[DSLActualRateUp]string{}

func (a DSLActualRateUp) String() string {
	if str, ok := DSLActualRateUp_Strings[a]; ok {
		return str
	}
	return "DSLActualRateUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLActualRateUp_Add(p *radius.Packet, value DSLActualRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 166, a)
}

func DSLActualRateUp_Get(p *radius.Packet) (value DSLActualRateUp) {
	value, _ = DSLActualRateUp_Lookup(p)
	return
}

func DSLActualRateUp_Gets(p *radius.Packet) (values []DSLActualRateUp, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 166) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLActualRateUp(i))
	}
	return
}

func DSLActualRateUp_Lookup(p *radius.Packet) (value DSLActualRateUp, err error) {
	a, ok := _Redback_LookupVendor(p, 166)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLActualRateUp(i)
	return
}

func DSLActualRateUp_Set(p *radius.Packet, value DSLActualRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 166, a)
}

func DSLActualRateUp_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 166)
}

type DSLActualRateDown uint32

var DSLActualRateDown_Strings = map[DSLActualRateDown]string{}

func (a DSLActualRateDown) String() string {
	if str, ok := DSLActualRateDown_Strings[a]; ok {
		return str
	}
	return "DSLActualRateDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLActualRateDown_Add(p *radius.Packet, value DSLActualRateDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 167, a)
}

func DSLActualRateDown_Get(p *radius.Packet) (value DSLActualRateDown) {
	value, _ = DSLActualRateDown_Lookup(p)
	return
}

func DSLActualRateDown_Gets(p *radius.Packet) (values []DSLActualRateDown, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 167) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLActualRateDown(i))
	}
	return
}

func DSLActualRateDown_Lookup(p *radius.Packet) (value DSLActualRateDown, err error) {
	a, ok := _Redback_LookupVendor(p, 167)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLActualRateDown(i)
	return
}

func DSLActualRateDown_Set(p *radius.Packet, value DSLActualRateDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 167, a)
}

func DSLActualRateDown_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 167)
}

type DSLMinRateUp uint32

var DSLMinRateUp_Strings = map[DSLMinRateUp]string{}

func (a DSLMinRateUp) String() string {
	if str, ok := DSLMinRateUp_Strings[a]; ok {
		return str
	}
	return "DSLMinRateUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLMinRateUp_Add(p *radius.Packet, value DSLMinRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 168, a)
}

func DSLMinRateUp_Get(p *radius.Packet) (value DSLMinRateUp) {
	value, _ = DSLMinRateUp_Lookup(p)
	return
}

func DSLMinRateUp_Gets(p *radius.Packet) (values []DSLMinRateUp, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 168) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLMinRateUp(i))
	}
	return
}

func DSLMinRateUp_Lookup(p *radius.Packet) (value DSLMinRateUp, err error) {
	a, ok := _Redback_LookupVendor(p, 168)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLMinRateUp(i)
	return
}

func DSLMinRateUp_Set(p *radius.Packet, value DSLMinRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 168, a)
}

func DSLMinRateUp_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 168)
}

type DSLMinRateDown uint32

var DSLMinRateDown_Strings = map[DSLMinRateDown]string{}

func (a DSLMinRateDown) String() string {
	if str, ok := DSLMinRateDown_Strings[a]; ok {
		return str
	}
	return "DSLMinRateDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLMinRateDown_Add(p *radius.Packet, value DSLMinRateDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 169, a)
}

func DSLMinRateDown_Get(p *radius.Packet) (value DSLMinRateDown) {
	value, _ = DSLMinRateDown_Lookup(p)
	return
}

func DSLMinRateDown_Gets(p *radius.Packet) (values []DSLMinRateDown, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 169) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLMinRateDown(i))
	}
	return
}

func DSLMinRateDown_Lookup(p *radius.Packet) (value DSLMinRateDown, err error) {
	a, ok := _Redback_LookupVendor(p, 169)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLMinRateDown(i)
	return
}

func DSLMinRateDown_Set(p *radius.Packet, value DSLMinRateDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 169, a)
}

func DSLMinRateDown_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 169)
}

type DSLAttainableRateUp uint32

var DSLAttainableRateUp_Strings = map[DSLAttainableRateUp]string{}

func (a DSLAttainableRateUp) String() string {
	if str, ok := DSLAttainableRateUp_Strings[a]; ok {
		return str
	}
	return "DSLAttainableRateUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLAttainableRateUp_Add(p *radius.Packet, value DSLAttainableRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 170, a)
}

func DSLAttainableRateUp_Get(p *radius.Packet) (value DSLAttainableRateUp) {
	value, _ = DSLAttainableRateUp_Lookup(p)
	return
}

func DSLAttainableRateUp_Gets(p *radius.Packet) (values []DSLAttainableRateUp, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 170) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLAttainableRateUp(i))
	}
	return
}

func DSLAttainableRateUp_Lookup(p *radius.Packet) (value DSLAttainableRateUp, err error) {
	a, ok := _Redback_LookupVendor(p, 170)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLAttainableRateUp(i)
	return
}

func DSLAttainableRateUp_Set(p *radius.Packet, value DSLAttainableRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 170, a)
}

func DSLAttainableRateUp_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 170)
}

type DSLAttainableRateDown uint32

var DSLAttainableRateDown_Strings = map[DSLAttainableRateDown]string{}

func (a DSLAttainableRateDown) String() string {
	if str, ok := DSLAttainableRateDown_Strings[a]; ok {
		return str
	}
	return "DSLAttainableRateDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLAttainableRateDown_Add(p *radius.Packet, value DSLAttainableRateDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 171, a)
}

func DSLAttainableRateDown_Get(p *radius.Packet) (value DSLAttainableRateDown) {
	value, _ = DSLAttainableRateDown_Lookup(p)
	return
}

func DSLAttainableRateDown_Gets(p *radius.Packet) (values []DSLAttainableRateDown, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 171) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLAttainableRateDown(i))
	}
	return
}

func DSLAttainableRateDown_Lookup(p *radius.Packet) (value DSLAttainableRateDown, err error) {
	a, ok := _Redback_LookupVendor(p, 171)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLAttainableRateDown(i)
	return
}

func DSLAttainableRateDown_Set(p *radius.Packet, value DSLAttainableRateDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 171, a)
}

func DSLAttainableRateDown_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 171)
}

type DSLMaxRateUp uint32

var DSLMaxRateUp_Strings = map[DSLMaxRateUp]string{}

func (a DSLMaxRateUp) String() string {
	if str, ok := DSLMaxRateUp_Strings[a]; ok {
		return str
	}
	return "DSLMaxRateUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLMaxRateUp_Add(p *radius.Packet, value DSLMaxRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 172, a)
}

func DSLMaxRateUp_Get(p *radius.Packet) (value DSLMaxRateUp) {
	value, _ = DSLMaxRateUp_Lookup(p)
	return
}

func DSLMaxRateUp_Gets(p *radius.Packet) (values []DSLMaxRateUp, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 172) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLMaxRateUp(i))
	}
	return
}

func DSLMaxRateUp_Lookup(p *radius.Packet) (value DSLMaxRateUp, err error) {
	a, ok := _Redback_LookupVendor(p, 172)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLMaxRateUp(i)
	return
}

func DSLMaxRateUp_Set(p *radius.Packet, value DSLMaxRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 172, a)
}

func DSLMaxRateUp_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 172)
}

type DSLMaxRateDown uint32

var DSLMaxRateDown_Strings = map[DSLMaxRateDown]string{}

func (a DSLMaxRateDown) String() string {
	if str, ok := DSLMaxRateDown_Strings[a]; ok {
		return str
	}
	return "DSLMaxRateDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLMaxRateDown_Add(p *radius.Packet, value DSLMaxRateDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 173, a)
}

func DSLMaxRateDown_Get(p *radius.Packet) (value DSLMaxRateDown) {
	value, _ = DSLMaxRateDown_Lookup(p)
	return
}

func DSLMaxRateDown_Gets(p *radius.Packet) (values []DSLMaxRateDown, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 173) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLMaxRateDown(i))
	}
	return
}

func DSLMaxRateDown_Lookup(p *radius.Packet) (value DSLMaxRateDown, err error) {
	a, ok := _Redback_LookupVendor(p, 173)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLMaxRateDown(i)
	return
}

func DSLMaxRateDown_Set(p *radius.Packet, value DSLMaxRateDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 173, a)
}

func DSLMaxRateDown_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 173)
}

type DSLMinLowPowerRateUp uint32

var DSLMinLowPowerRateUp_Strings = map[DSLMinLowPowerRateUp]string{}

func (a DSLMinLowPowerRateUp) String() string {
	if str, ok := DSLMinLowPowerRateUp_Strings[a]; ok {
		return str
	}
	return "DSLMinLowPowerRateUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLMinLowPowerRateUp_Add(p *radius.Packet, value DSLMinLowPowerRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 174, a)
}

func DSLMinLowPowerRateUp_Get(p *radius.Packet) (value DSLMinLowPowerRateUp) {
	value, _ = DSLMinLowPowerRateUp_Lookup(p)
	return
}

func DSLMinLowPowerRateUp_Gets(p *radius.Packet) (values []DSLMinLowPowerRateUp, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 174) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLMinLowPowerRateUp(i))
	}
	return
}

func DSLMinLowPowerRateUp_Lookup(p *radius.Packet) (value DSLMinLowPowerRateUp, err error) {
	a, ok := _Redback_LookupVendor(p, 174)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLMinLowPowerRateUp(i)
	return
}

func DSLMinLowPowerRateUp_Set(p *radius.Packet, value DSLMinLowPowerRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 174, a)
}

func DSLMinLowPowerRateUp_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 174)
}

type DSLMinLowPowerRateDown uint32

var DSLMinLowPowerRateDown_Strings = map[DSLMinLowPowerRateDown]string{}

func (a DSLMinLowPowerRateDown) String() string {
	if str, ok := DSLMinLowPowerRateDown_Strings[a]; ok {
		return str
	}
	return "DSLMinLowPowerRateDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLMinLowPowerRateDown_Add(p *radius.Packet, value DSLMinLowPowerRateDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 175, a)
}

func DSLMinLowPowerRateDown_Get(p *radius.Packet) (value DSLMinLowPowerRateDown) {
	value, _ = DSLMinLowPowerRateDown_Lookup(p)
	return
}

func DSLMinLowPowerRateDown_Gets(p *radius.Packet) (values []DSLMinLowPowerRateDown, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 175) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLMinLowPowerRateDown(i))
	}
	return
}

func DSLMinLowPowerRateDown_Lookup(p *radius.Packet) (value DSLMinLowPowerRateDown, err error) {
	a, ok := _Redback_LookupVendor(p, 175)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLMinLowPowerRateDown(i)
	return
}

func DSLMinLowPowerRateDown_Set(p *radius.Packet, value DSLMinLowPowerRateDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 175, a)
}

func DSLMinLowPowerRateDown_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 175)
}

type DSLMaxInterDelayUp uint32

var DSLMaxInterDelayUp_Strings = map[DSLMaxInterDelayUp]string{}

func (a DSLMaxInterDelayUp) String() string {
	if str, ok := DSLMaxInterDelayUp_Strings[a]; ok {
		return str
	}
	return "DSLMaxInterDelayUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLMaxInterDelayUp_Add(p *radius.Packet, value DSLMaxInterDelayUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 176, a)
}

func DSLMaxInterDelayUp_Get(p *radius.Packet) (value DSLMaxInterDelayUp) {
	value, _ = DSLMaxInterDelayUp_Lookup(p)
	return
}

func DSLMaxInterDelayUp_Gets(p *radius.Packet) (values []DSLMaxInterDelayUp, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 176) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLMaxInterDelayUp(i))
	}
	return
}

func DSLMaxInterDelayUp_Lookup(p *radius.Packet) (value DSLMaxInterDelayUp, err error) {
	a, ok := _Redback_LookupVendor(p, 176)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLMaxInterDelayUp(i)
	return
}

func DSLMaxInterDelayUp_Set(p *radius.Packet, value DSLMaxInterDelayUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 176, a)
}

func DSLMaxInterDelayUp_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 176)
}

type DSLActualInterDelayUp uint32

var DSLActualInterDelayUp_Strings = map[DSLActualInterDelayUp]string{}

func (a DSLActualInterDelayUp) String() string {
	if str, ok := DSLActualInterDelayUp_Strings[a]; ok {
		return str
	}
	return "DSLActualInterDelayUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLActualInterDelayUp_Add(p *radius.Packet, value DSLActualInterDelayUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 177, a)
}

func DSLActualInterDelayUp_Get(p *radius.Packet) (value DSLActualInterDelayUp) {
	value, _ = DSLActualInterDelayUp_Lookup(p)
	return
}

func DSLActualInterDelayUp_Gets(p *radius.Packet) (values []DSLActualInterDelayUp, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 177) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLActualInterDelayUp(i))
	}
	return
}

func DSLActualInterDelayUp_Lookup(p *radius.Packet) (value DSLActualInterDelayUp, err error) {
	a, ok := _Redback_LookupVendor(p, 177)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLActualInterDelayUp(i)
	return
}

func DSLActualInterDelayUp_Set(p *radius.Packet, value DSLActualInterDelayUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 177, a)
}

func DSLActualInterDelayUp_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 177)
}

type DSLMaxInterDelayDown uint32

var DSLMaxInterDelayDown_Strings = map[DSLMaxInterDelayDown]string{}

func (a DSLMaxInterDelayDown) String() string {
	if str, ok := DSLMaxInterDelayDown_Strings[a]; ok {
		return str
	}
	return "DSLMaxInterDelayDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLMaxInterDelayDown_Add(p *radius.Packet, value DSLMaxInterDelayDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 178, a)
}

func DSLMaxInterDelayDown_Get(p *radius.Packet) (value DSLMaxInterDelayDown) {
	value, _ = DSLMaxInterDelayDown_Lookup(p)
	return
}

func DSLMaxInterDelayDown_Gets(p *radius.Packet) (values []DSLMaxInterDelayDown, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 178) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLMaxInterDelayDown(i))
	}
	return
}

func DSLMaxInterDelayDown_Lookup(p *radius.Packet) (value DSLMaxInterDelayDown, err error) {
	a, ok := _Redback_LookupVendor(p, 178)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLMaxInterDelayDown(i)
	return
}

func DSLMaxInterDelayDown_Set(p *radius.Packet, value DSLMaxInterDelayDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 178, a)
}

func DSLMaxInterDelayDown_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 178)
}

type DSLActualInterDelayDown uint32

var DSLActualInterDelayDown_Strings = map[DSLActualInterDelayDown]string{}

func (a DSLActualInterDelayDown) String() string {
	if str, ok := DSLActualInterDelayDown_Strings[a]; ok {
		return str
	}
	return "DSLActualInterDelayDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLActualInterDelayDown_Add(p *radius.Packet, value DSLActualInterDelayDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 179, a)
}

func DSLActualInterDelayDown_Get(p *radius.Packet) (value DSLActualInterDelayDown) {
	value, _ = DSLActualInterDelayDown_Lookup(p)
	return
}

func DSLActualInterDelayDown_Gets(p *radius.Packet) (values []DSLActualInterDelayDown, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 179) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLActualInterDelayDown(i))
	}
	return
}

func DSLActualInterDelayDown_Lookup(p *radius.Packet) (value DSLActualInterDelayDown, err error) {
	a, ok := _Redback_LookupVendor(p, 179)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLActualInterDelayDown(i)
	return
}

func DSLActualInterDelayDown_Set(p *radius.Packet, value DSLActualInterDelayDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 179, a)
}

func DSLActualInterDelayDown_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 179)
}

type DSLLineState uint32

const (
	DSLLineState_Value_Showtime DSLLineState = 1
	DSLLineState_Value_Idle     DSLLineState = 2
	DSLLineState_Value_Silent   DSLLineState = 3
)

var DSLLineState_Strings = map[DSLLineState]string{
	DSLLineState_Value_Showtime: "Showtime",
	DSLLineState_Value_Idle:     "Idle",
	DSLLineState_Value_Silent:   "Silent",
}

func (a DSLLineState) String() string {
	if str, ok := DSLLineState_Strings[a]; ok {
		return str
	}
	return "DSLLineState(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLLineState_Add(p *radius.Packet, value DSLLineState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 180, a)
}

func DSLLineState_Get(p *radius.Packet) (value DSLLineState) {
	value, _ = DSLLineState_Lookup(p)
	return
}

func DSLLineState_Gets(p *radius.Packet) (values []DSLLineState, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 180) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLLineState(i))
	}
	return
}

func DSLLineState_Lookup(p *radius.Packet) (value DSLLineState, err error) {
	a, ok := _Redback_LookupVendor(p, 180)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLLineState(i)
	return
}

func DSLLineState_Set(p *radius.Packet, value DSLLineState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 180, a)
}

func DSLLineState_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 180)
}

type DSLL2Encapsulation uint32

var DSLL2Encapsulation_Strings = map[DSLL2Encapsulation]string{}

func (a DSLL2Encapsulation) String() string {
	if str, ok := DSLL2Encapsulation_Strings[a]; ok {
		return str
	}
	return "DSLL2Encapsulation(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLL2Encapsulation_Add(p *radius.Packet, value DSLL2Encapsulation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 181, a)
}

func DSLL2Encapsulation_Get(p *radius.Packet) (value DSLL2Encapsulation) {
	value, _ = DSLL2Encapsulation_Lookup(p)
	return
}

func DSLL2Encapsulation_Gets(p *radius.Packet) (values []DSLL2Encapsulation, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 181) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLL2Encapsulation(i))
	}
	return
}

func DSLL2Encapsulation_Lookup(p *radius.Packet) (value DSLL2Encapsulation, err error) {
	a, ok := _Redback_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLL2Encapsulation(i)
	return
}

func DSLL2Encapsulation_Set(p *radius.Packet, value DSLL2Encapsulation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 181, a)
}

func DSLL2Encapsulation_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 181)
}

type DSLTransmissionSystem uint32

const (
	DSLTransmissionSystem_Value_ADSL1     DSLTransmissionSystem = 1
	DSLTransmissionSystem_Value_ADSL2     DSLTransmissionSystem = 2
	DSLTransmissionSystem_Value_ADSL2Plus DSLTransmissionSystem = 3
	DSLTransmissionSystem_Value_VDSL1     DSLTransmissionSystem = 4
	DSLTransmissionSystem_Value_VDSL2     DSLTransmissionSystem = 5
	DSLTransmissionSystem_Value_SDSL      DSLTransmissionSystem = 6
	DSLTransmissionSystem_Value_UNKNOWN   DSLTransmissionSystem = 7
)

var DSLTransmissionSystem_Strings = map[DSLTransmissionSystem]string{
	DSLTransmissionSystem_Value_ADSL1:     "ADSL1",
	DSLTransmissionSystem_Value_ADSL2:     "ADSL2",
	DSLTransmissionSystem_Value_ADSL2Plus: "ADSL2+",
	DSLTransmissionSystem_Value_VDSL1:     "VDSL1",
	DSLTransmissionSystem_Value_VDSL2:     "VDSL2",
	DSLTransmissionSystem_Value_SDSL:      "SDSL",
	DSLTransmissionSystem_Value_UNKNOWN:   "UNKNOWN",
}

func (a DSLTransmissionSystem) String() string {
	if str, ok := DSLTransmissionSystem_Strings[a]; ok {
		return str
	}
	return "DSLTransmissionSystem(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLTransmissionSystem_Add(p *radius.Packet, value DSLTransmissionSystem) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 182, a)
}

func DSLTransmissionSystem_Get(p *radius.Packet) (value DSLTransmissionSystem) {
	value, _ = DSLTransmissionSystem_Lookup(p)
	return
}

func DSLTransmissionSystem_Gets(p *radius.Packet) (values []DSLTransmissionSystem, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 182) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLTransmissionSystem(i))
	}
	return
}

func DSLTransmissionSystem_Lookup(p *radius.Packet) (value DSLTransmissionSystem, err error) {
	a, ok := _Redback_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLTransmissionSystem(i)
	return
}

func DSLTransmissionSystem_Set(p *radius.Packet, value DSLTransmissionSystem) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 182, a)
}

func DSLTransmissionSystem_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 182)
}

type DSLPPPOAPPPOEInterWorkFlag uint32

var DSLPPPOAPPPOEInterWorkFlag_Strings = map[DSLPPPOAPPPOEInterWorkFlag]string{}

func (a DSLPPPOAPPPOEInterWorkFlag) String() string {
	if str, ok := DSLPPPOAPPPOEInterWorkFlag_Strings[a]; ok {
		return str
	}
	return "DSLPPPOAPPPOEInterWorkFlag(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLPPPOAPPPOEInterWorkFlag_Add(p *radius.Packet, value DSLPPPOAPPPOEInterWorkFlag) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 183, a)
}

func DSLPPPOAPPPOEInterWorkFlag_Get(p *radius.Packet) (value DSLPPPOAPPPOEInterWorkFlag) {
	value, _ = DSLPPPOAPPPOEInterWorkFlag_Lookup(p)
	return
}

func DSLPPPOAPPPOEInterWorkFlag_Gets(p *radius.Packet) (values []DSLPPPOAPPPOEInterWorkFlag, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 183) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLPPPOAPPPOEInterWorkFlag(i))
	}
	return
}

func DSLPPPOAPPPOEInterWorkFlag_Lookup(p *radius.Packet) (value DSLPPPOAPPPOEInterWorkFlag, err error) {
	a, ok := _Redback_LookupVendor(p, 183)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLPPPOAPPPOEInterWorkFlag(i)
	return
}

func DSLPPPOAPPPOEInterWorkFlag_Set(p *radius.Packet, value DSLPPPOAPPPOEInterWorkFlag) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 183, a)
}

func DSLPPPOAPPPOEInterWorkFlag_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 183)
}

type DSLActualRateDownFactor uint32

var DSLActualRateDownFactor_Strings = map[DSLActualRateDownFactor]string{}

func (a DSLActualRateDownFactor) String() string {
	if str, ok := DSLActualRateDownFactor_Strings[a]; ok {
		return str
	}
	return "DSLActualRateDownFactor(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DSLActualRateDownFactor_Add(p *radius.Packet, value DSLActualRateDownFactor) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 185, a)
}

func DSLActualRateDownFactor_Get(p *radius.Packet) (value DSLActualRateDownFactor) {
	value, _ = DSLActualRateDownFactor_Lookup(p)
	return
}

func DSLActualRateDownFactor_Gets(p *radius.Packet) (values []DSLActualRateDownFactor, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 185) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DSLActualRateDownFactor(i))
	}
	return
}

func DSLActualRateDownFactor_Lookup(p *radius.Packet) (value DSLActualRateDownFactor, err error) {
	a, ok := _Redback_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DSLActualRateDownFactor(i)
	return
}

func DSLActualRateDownFactor_Set(p *radius.Packet, value DSLActualRateDownFactor) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 185, a)
}

func DSLActualRateDownFactor_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 185)
}

func DSLCombinedLineInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 184, a)
}

func DSLCombinedLineInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 184, a)
}

func DSLCombinedLineInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = DSLCombinedLineInfo_Lookup(p)
	return
}

func DSLCombinedLineInfo_GetString(p *radius.Packet) (value string) {
	value, _ = DSLCombinedLineInfo_LookupString(p)
	return
}

func DSLCombinedLineInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 184) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DSLCombinedLineInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 184) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DSLCombinedLineInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DSLCombinedLineInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DSLCombinedLineInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 184, a)
}

func DSLCombinedLineInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 184, a)
}

func DSLCombinedLineInfo_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 184)
}

func ClassVolumeLimit_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 186, a)
}

func ClassVolumeLimit_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 186, a)
}

func ClassVolumeLimit_Get(p *radius.Packet) (value []byte) {
	value, _ = ClassVolumeLimit_Lookup(p)
	return
}

func ClassVolumeLimit_GetString(p *radius.Packet) (value string) {
	value, _ = ClassVolumeLimit_LookupString(p)
	return
}

func ClassVolumeLimit_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 186) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClassVolumeLimit_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 186) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClassVolumeLimit_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 186)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ClassVolumeLimit_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 186)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ClassVolumeLimit_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 186, a)
}

func ClassVolumeLimit_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 186, a)
}

func ClassVolumeLimit_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 186)
}

func ClassVolumeInCounter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 187, a)
}

func ClassVolumeInCounter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 187, a)
}

func ClassVolumeInCounter_Get(p *radius.Packet) (value []byte) {
	value, _ = ClassVolumeInCounter_Lookup(p)
	return
}

func ClassVolumeInCounter_GetString(p *radius.Packet) (value string) {
	value, _ = ClassVolumeInCounter_LookupString(p)
	return
}

func ClassVolumeInCounter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 187) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClassVolumeInCounter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 187) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClassVolumeInCounter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ClassVolumeInCounter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ClassVolumeInCounter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 187, a)
}

func ClassVolumeInCounter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 187, a)
}

func ClassVolumeInCounter_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 187)
}

func ClassVolumeOutCounter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 188, a)
}

func ClassVolumeOutCounter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 188, a)
}

func ClassVolumeOutCounter_Get(p *radius.Packet) (value []byte) {
	value, _ = ClassVolumeOutCounter_Lookup(p)
	return
}

func ClassVolumeOutCounter_GetString(p *radius.Packet) (value string) {
	value, _ = ClassVolumeOutCounter_LookupString(p)
	return
}

func ClassVolumeOutCounter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 188) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClassVolumeOutCounter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 188) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClassVolumeOutCounter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ClassVolumeOutCounter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ClassVolumeOutCounter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 188, a)
}

func ClassVolumeOutCounter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 188, a)
}

func ClassVolumeOutCounter_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 188)
}

func FlowFACProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 189, a)
}

func FlowFACProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 189, a)
}

func FlowFACProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = FlowFACProfile_Lookup(p)
	return
}

func FlowFACProfile_GetString(p *radius.Packet) (value string) {
	value, _ = FlowFACProfile_LookupString(p)
	return
}

func FlowFACProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 189) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FlowFACProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 189) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FlowFACProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 189)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FlowFACProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 189)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FlowFACProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 189, a)
}

func FlowFACProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 189, a)
}

func FlowFACProfile_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 189)
}

func ServiceName_Add(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_AddVendor(p, 190, a)
}

func ServiceName_AddString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_AddVendor(p, 190, a)
}

func ServiceName_Get(p *radius.Packet) (tag byte, value []byte) {
	tag, value, _ = ServiceName_Lookup(p)
	return
}

func ServiceName_GetString(p *radius.Packet) (tag byte, value string) {
	tag, value, _ = ServiceName_LookupString(p)
	return
}

func ServiceName_Gets(p *radius.Packet) (tags []byte, values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 190) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func ServiceName_GetStrings(p *radius.Packet) (tags []byte, values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 190) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func ServiceName_Lookup(p *radius.Packet) (tag byte, value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 190)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.Bytes(a)
	return
}

func ServiceName_LookupString(p *radius.Packet) (tag byte, value string, err error) {
	a, ok := _Redback_LookupVendor(p, 190)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.String(a)
	return
}

func ServiceName_Set(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_SetVendor(p, 190, a)
}

func ServiceName_SetString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_SetVendor(p, 190, a)
}

func ServiceName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 190)
}

type ServiceAction uint32

const (
	ServiceAction_Value_DEACTIVATE          ServiceAction = 0
	ServiceAction_Value_ACTIVATEWITHACCT    ServiceAction = 1
	ServiceAction_Value_ACTIVATEWITHOUTACCT ServiceAction = 2
)

var ServiceAction_Strings = map[ServiceAction]string{
	ServiceAction_Value_DEACTIVATE:          "DE-ACTIVATE",
	ServiceAction_Value_ACTIVATEWITHACCT:    "ACTIVATE-WITH-ACCT",
	ServiceAction_Value_ACTIVATEWITHOUTACCT: "ACTIVATE-WITHOUT-ACCT",
}

func (a ServiceAction) String() string {
	if str, ok := ServiceAction_Strings[a]; ok {
		return str
	}
	return "ServiceAction(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ServiceAction_Add(p *radius.Packet, tag byte, value ServiceAction) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Redback_AddVendor(p, 191, a)
}

func ServiceAction_Get(p *radius.Packet) (tag byte, value ServiceAction) {
	tag, value, _ = ServiceAction_Lookup(p)
	return
}

func ServiceAction_Gets(p *radius.Packet) (tags []byte, values []ServiceAction, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 191) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr[0] = 0x00
		}
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ServiceAction(i))
		tags = append(tags, tag)
	}
	return
}

func ServiceAction_Lookup(p *radius.Packet) (tag byte, value ServiceAction, err error) {
	a, ok := _Redback_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a[0] = 0x00
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ServiceAction(i)
	return
}

func ServiceAction_Set(p *radius.Packet, tag byte, value ServiceAction) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Redback_SetVendor(p, 191, a)
}

func ServiceAction_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 191)
}

func ServiceParameter_Add(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_AddVendor(p, 192, a)
}

func ServiceParameter_AddString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_AddVendor(p, 192, a)
}

func ServiceParameter_Get(p *radius.Packet) (tag byte, value []byte) {
	tag, value, _ = ServiceParameter_Lookup(p)
	return
}

func ServiceParameter_GetString(p *radius.Packet) (tag byte, value string) {
	tag, value, _ = ServiceParameter_LookupString(p)
	return
}

func ServiceParameter_Gets(p *radius.Packet) (tags []byte, values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 192) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func ServiceParameter_GetStrings(p *radius.Packet) (tags []byte, values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 192) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func ServiceParameter_Lookup(p *radius.Packet) (tag byte, value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.Bytes(a)
	return
}

func ServiceParameter_LookupString(p *radius.Packet) (tag byte, value string, err error) {
	a, ok := _Redback_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.String(a)
	return
}

func ServiceParameter_Set(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_SetVendor(p, 192, a)
}

func ServiceParameter_SetString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_SetVendor(p, 192, a)
}

func ServiceParameter_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 192)
}

type ServiceErrorCause uint32

const (
	ServiceErrorCause_Value_ServiceSuccess            ServiceErrorCause = 0
	ServiceErrorCause_Value_UnsupportedAttribute      ServiceErrorCause = 401
	ServiceErrorCause_Value_MissingAttribute          ServiceErrorCause = 402
	ServiceErrorCause_Value_InvalidRequest            ServiceErrorCause = 404
	ServiceErrorCause_Value_ResourceUnavailable       ServiceErrorCause = 506
	ServiceErrorCause_Value_GenericServiceError       ServiceErrorCause = 550
	ServiceErrorCause_Value_ServiceNotFound           ServiceErrorCause = 551
	ServiceErrorCause_Value_ServiceAlreadyActive      ServiceErrorCause = 552
	ServiceErrorCause_Value_ServiceAccountingDisabled ServiceErrorCause = 553
	ServiceErrorCause_Value_ServiceDuplicateParameter ServiceErrorCause = 554
)

var ServiceErrorCause_Strings = map[ServiceErrorCause]string{
	ServiceErrorCause_Value_ServiceSuccess:            "Service-success",
	ServiceErrorCause_Value_UnsupportedAttribute:      "Unsupported-attribute",
	ServiceErrorCause_Value_MissingAttribute:          "Missing-attribute",
	ServiceErrorCause_Value_InvalidRequest:            "Invalid-request",
	ServiceErrorCause_Value_ResourceUnavailable:       "Resource-unavailable",
	ServiceErrorCause_Value_GenericServiceError:       "Generic-service-error",
	ServiceErrorCause_Value_ServiceNotFound:           "Service-not-found",
	ServiceErrorCause_Value_ServiceAlreadyActive:      "Service-already-active",
	ServiceErrorCause_Value_ServiceAccountingDisabled: "Service-accounting-disabled",
	ServiceErrorCause_Value_ServiceDuplicateParameter: "Service-duplicate-parameter",
}

func (a ServiceErrorCause) String() string {
	if str, ok := ServiceErrorCause_Strings[a]; ok {
		return str
	}
	return "ServiceErrorCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ServiceErrorCause_Add(p *radius.Packet, tag byte, value ServiceErrorCause) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Redback_AddVendor(p, 193, a)
}

func ServiceErrorCause_Get(p *radius.Packet) (tag byte, value ServiceErrorCause) {
	tag, value, _ = ServiceErrorCause_Lookup(p)
	return
}

func ServiceErrorCause_Gets(p *radius.Packet) (tags []byte, values []ServiceErrorCause, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 193) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr[0] = 0x00
		}
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ServiceErrorCause(i))
		tags = append(tags, tag)
	}
	return
}

func ServiceErrorCause_Lookup(p *radius.Packet) (tag byte, value ServiceErrorCause, err error) {
	a, ok := _Redback_LookupVendor(p, 193)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a[0] = 0x00
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ServiceErrorCause(i)
	return
}

func ServiceErrorCause_Set(p *radius.Packet, tag byte, value ServiceErrorCause) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Redback_SetVendor(p, 193, a)
}

func ServiceErrorCause_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 193)
}

func DeactivateServiceName_Add(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_AddVendor(p, 194, a)
}

func DeactivateServiceName_AddString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_AddVendor(p, 194, a)
}

func DeactivateServiceName_Get(p *radius.Packet) (tag byte, value []byte) {
	tag, value, _ = DeactivateServiceName_Lookup(p)
	return
}

func DeactivateServiceName_GetString(p *radius.Packet) (tag byte, value string) {
	tag, value, _ = DeactivateServiceName_LookupString(p)
	return
}

func DeactivateServiceName_Gets(p *radius.Packet) (tags []byte, values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 194) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func DeactivateServiceName_GetStrings(p *radius.Packet) (tags []byte, values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 194) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func DeactivateServiceName_Lookup(p *radius.Packet) (tag byte, value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 194)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.Bytes(a)
	return
}

func DeactivateServiceName_LookupString(p *radius.Packet) (tag byte, value string, err error) {
	a, ok := _Redback_LookupVendor(p, 194)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.String(a)
	return
}

func DeactivateServiceName_Set(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_SetVendor(p, 194, a)
}

func DeactivateServiceName_SetString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_SetVendor(p, 194, a)
}

func DeactivateServiceName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 194)
}

func QosProfileOverhead_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 195, a)
}

func QosProfileOverhead_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 195, a)
}

func QosProfileOverhead_Get(p *radius.Packet) (value []byte) {
	value, _ = QosProfileOverhead_Lookup(p)
	return
}

func QosProfileOverhead_GetString(p *radius.Packet) (value string) {
	value, _ = QosProfileOverhead_LookupString(p)
	return
}

func QosProfileOverhead_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 195) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QosProfileOverhead_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 195) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func QosProfileOverhead_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 195)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func QosProfileOverhead_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 195)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func QosProfileOverhead_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 195, a)
}

func QosProfileOverhead_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 195, a)
}

func QosProfileOverhead_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 195)
}

func DynamicQoSParam_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 196, a)
}

func DynamicQoSParam_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 196, a)
}

func DynamicQoSParam_Get(p *radius.Packet) (value []byte) {
	value, _ = DynamicQoSParam_Lookup(p)
	return
}

func DynamicQoSParam_GetString(p *radius.Packet) (value string) {
	value, _ = DynamicQoSParam_LookupString(p)
	return
}

func DynamicQoSParam_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 196) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DynamicQoSParam_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 196) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DynamicQoSParam_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 196)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DynamicQoSParam_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 196)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DynamicQoSParam_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 196, a)
}

func DynamicQoSParam_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 196, a)
}

func DynamicQoSParam_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 196)
}

func AcctAltSessionID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 197, a)
}

func AcctAltSessionID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 197, a)
}

func AcctAltSessionID_Get(p *radius.Packet) (value []byte) {
	value, _ = AcctAltSessionID_Lookup(p)
	return
}

func AcctAltSessionID_GetString(p *radius.Packet) (value string) {
	value, _ = AcctAltSessionID_LookupString(p)
	return
}

func AcctAltSessionID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 197) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcctAltSessionID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 197) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcctAltSessionID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 197)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcctAltSessionID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 197)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcctAltSessionID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 197, a)
}

func AcctAltSessionID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 197, a)
}

func AcctAltSessionID_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 197)
}

type IdleTimeoutThreshold uint32

var IdleTimeoutThreshold_Strings = map[IdleTimeoutThreshold]string{}

func (a IdleTimeoutThreshold) String() string {
	if str, ok := IdleTimeoutThreshold_Strings[a]; ok {
		return str
	}
	return "IdleTimeoutThreshold(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func IdleTimeoutThreshold_Add(p *radius.Packet, value IdleTimeoutThreshold) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 198, a)
}

func IdleTimeoutThreshold_Get(p *radius.Packet) (value IdleTimeoutThreshold) {
	value, _ = IdleTimeoutThreshold_Lookup(p)
	return
}

func IdleTimeoutThreshold_Gets(p *radius.Packet) (values []IdleTimeoutThreshold, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 198) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, IdleTimeoutThreshold(i))
	}
	return
}

func IdleTimeoutThreshold_Lookup(p *radius.Packet) (value IdleTimeoutThreshold, err error) {
	a, ok := _Redback_LookupVendor(p, 198)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = IdleTimeoutThreshold(i)
	return
}

func IdleTimeoutThreshold_Set(p *radius.Packet, value IdleTimeoutThreshold) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 198, a)
}

func IdleTimeoutThreshold_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 198)
}

type DoubleAuthentication uint32

var DoubleAuthentication_Strings = map[DoubleAuthentication]string{}

func (a DoubleAuthentication) String() string {
	if str, ok := DoubleAuthentication_Strings[a]; ok {
		return str
	}
	return "DoubleAuthentication(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DoubleAuthentication_Add(p *radius.Packet, value DoubleAuthentication) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 199, a)
}

func DoubleAuthentication_Get(p *radius.Packet) (value DoubleAuthentication) {
	value, _ = DoubleAuthentication_Lookup(p)
	return
}

func DoubleAuthentication_Gets(p *radius.Packet) (values []DoubleAuthentication, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 199) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DoubleAuthentication(i))
	}
	return
}

func DoubleAuthentication_Lookup(p *radius.Packet) (value DoubleAuthentication, err error) {
	a, ok := _Redback_LookupVendor(p, 199)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DoubleAuthentication(i)
	return
}

func DoubleAuthentication_Set(p *radius.Packet, value DoubleAuthentication) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 199, a)
}

func DoubleAuthentication_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 199)
}

func SBCAdjacency_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 200, a)
}

func SBCAdjacency_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 200, a)
}

func SBCAdjacency_Get(p *radius.Packet) (value []byte) {
	value, _ = SBCAdjacency_Lookup(p)
	return
}

func SBCAdjacency_GetString(p *radius.Packet) (value string) {
	value, _ = SBCAdjacency_LookupString(p)
	return
}

func SBCAdjacency_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 200) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SBCAdjacency_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 200) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SBCAdjacency_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 200)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SBCAdjacency_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 200)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SBCAdjacency_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 200, a)
}

func SBCAdjacency_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 200, a)
}

func SBCAdjacency_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 200)
}

func DHCPField_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 201, a)
}

func DHCPField_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 201, a)
}

func DHCPField_Get(p *radius.Packet) (value []byte) {
	value, _ = DHCPField_Lookup(p)
	return
}

func DHCPField_GetString(p *radius.Packet) (value string) {
	value, _ = DHCPField_LookupString(p)
	return
}

func DHCPField_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 201) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DHCPField_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 201) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DHCPField_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DHCPField_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DHCPField_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 201, a)
}

func DHCPField_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 201, a)
}

func DHCPField_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 201)
}

func DHCPOption_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 202, a)
}

func DHCPOption_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 202, a)
}

func DHCPOption_Get(p *radius.Packet) (value []byte) {
	value, _ = DHCPOption_Lookup(p)
	return
}

func DHCPOption_GetString(p *radius.Packet) (value string) {
	value, _ = DHCPOption_LookupString(p)
	return
}

func DHCPOption_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 202) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DHCPOption_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 202) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DHCPOption_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DHCPOption_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DHCPOption_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 202, a)
}

func DHCPOption_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 202, a)
}

func DHCPOption_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 202)
}

func SecurityService_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 203, a)
}

func SecurityService_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 203, a)
}

func SecurityService_Get(p *radius.Packet) (value []byte) {
	value, _ = SecurityService_Lookup(p)
	return
}

func SecurityService_GetString(p *radius.Packet) (value string) {
	value, _ = SecurityService_LookupString(p)
	return
}

func SecurityService_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 203) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SecurityService_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 203) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SecurityService_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SecurityService_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SecurityService_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 203, a)
}

func SecurityService_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 203, a)
}

func SecurityService_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 203)
}

func ReauthServiceName_Add(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_AddVendor(p, 204, a)
}

func ReauthServiceName_AddString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_AddVendor(p, 204, a)
}

func ReauthServiceName_Get(p *radius.Packet) (tag byte, value []byte) {
	tag, value, _ = ReauthServiceName_Lookup(p)
	return
}

func ReauthServiceName_GetString(p *radius.Packet) (tag byte, value string) {
	tag, value, _ = ReauthServiceName_LookupString(p)
	return
}

func ReauthServiceName_Gets(p *radius.Packet) (tags []byte, values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 204) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func ReauthServiceName_GetStrings(p *radius.Packet) (tags []byte, values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 204) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func ReauthServiceName_Lookup(p *radius.Packet) (tag byte, value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.Bytes(a)
	return
}

func ReauthServiceName_LookupString(p *radius.Packet) (tag byte, value string, err error) {
	a, ok := _Redback_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.String(a)
	return
}

func ReauthServiceName_Set(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_SetVendor(p, 204, a)
}

func ReauthServiceName_SetString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Redback_SetVendor(p, 204, a)
}

func ReauthServiceName_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 204)
}

func FlowIPProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 205, a)
}

func FlowIPProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_AddVendor(p, 205, a)
}

func FlowIPProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = FlowIPProfile_Lookup(p)
	return
}

func FlowIPProfile_GetString(p *radius.Packet) (value string) {
	value, _ = FlowIPProfile_LookupString(p)
	return
}

func FlowIPProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Redback_GetsVendor(p, 205) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FlowIPProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Redback_GetsVendor(p, 205) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FlowIPProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Redback_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FlowIPProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Redback_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FlowIPProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 205, a)
}

func FlowIPProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Redback_SetVendor(p, 205, a)
}

func FlowIPProfile_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 205)
}

type RadiusThrottleWatermark uint32

var RadiusThrottleWatermark_Strings = map[RadiusThrottleWatermark]string{}

func (a RadiusThrottleWatermark) String() string {
	if str, ok := RadiusThrottleWatermark_Strings[a]; ok {
		return str
	}
	return "RadiusThrottleWatermark(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RadiusThrottleWatermark_Add(p *radius.Packet, value RadiusThrottleWatermark) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_AddVendor(p, 206, a)
}

func RadiusThrottleWatermark_Get(p *radius.Packet) (value RadiusThrottleWatermark) {
	value, _ = RadiusThrottleWatermark_Lookup(p)
	return
}

func RadiusThrottleWatermark_Gets(p *radius.Packet) (values []RadiusThrottleWatermark, err error) {
	var i uint32
	for _, attr := range _Redback_GetsVendor(p, 206) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RadiusThrottleWatermark(i))
	}
	return
}

func RadiusThrottleWatermark_Lookup(p *radius.Packet) (value RadiusThrottleWatermark, err error) {
	a, ok := _Redback_LookupVendor(p, 206)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RadiusThrottleWatermark(i)
	return
}

func RadiusThrottleWatermark_Set(p *radius.Packet, value RadiusThrottleWatermark) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Redback_SetVendor(p, 206, a)
}

func RadiusThrottleWatermark_Del(p *radius.Packet) {
	_Redback_DelVendor(p, 206)
}
